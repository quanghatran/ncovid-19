/* Zepto v1.2.0 - zepto event ajax form ie - zeptojs.com/license */
!function(t,e){"function"==typeof define&&define.amd?define(function(){return e(t)}):e(t)}(this,function(t){var e=function(){function $(t){return null==t?String(t):S[C.call(t)]||"object"}function F(t){return"function"==$(t)}function k(t){return null!=t&&t==t.window}function M(t){return null!=t&&t.nodeType==t.DOCUMENT_NODE}function R(t){return"object"==$(t)}function Z(t){return R(t)&&!k(t)&&Object.getPrototypeOf(t)==Object.prototype}function z(t){var e=!!t&&"length"in t&&t.length,n=r.type(t);return"function"!=n&&!k(t)&&("array"==n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function q(t){return a.call(t,function(t){return null!=t})}function H(t){return t.length>0?r.fn.concat.apply([],t):t}function I(t){return t.replace(/::/g,"/").replace(/([A-Z]+)([A-Z][a-z])/g,"$1_$2").replace(/([a-z\d])([A-Z])/g,"$1_$2").replace(/_/g,"-").toLowerCase()}function V(t){return t in l?l[t]:l[t]=new RegExp("(^|\\s)"+t+"(\\s|$)")}function _(t,e){return"number"!=typeof e||h[I(t)]?e:e+"px"}function B(t){var e,n;return c[t]||(e=f.createElement(t),f.body.appendChild(e),n=getComputedStyle(e,"").getPropertyValue("display"),e.parentNode.removeChild(e),"none"==n&&(n="block"),c[t]=n),c[t]}function U(t){return"children"in t?u.call(t.children):r.map(t.childNodes,function(t){return 1==t.nodeType?t:void 0})}function X(t,e){var n,r=t?t.length:0;for(n=0;r>n;n++)this[n]=t[n];this.length=r,this.selector=e||""}function J(t,r,i){for(n in r)i&&(Z(r[n])||L(r[n]))?(Z(r[n])&&!Z(t[n])&&(t[n]={}),L(r[n])&&!L(t[n])&&(t[n]=[]),J(t[n],r[n],i)):r[n]!==e&&(t[n]=r[n])}function W(t,e){return null==e?r(t):r(t).filter(e)}function Y(t,e,n,r){return F(e)?e.call(t,n,r):e}function G(t,e,n){null==n?t.removeAttribute(e):t.setAttribute(e,n)}function K(t,n){var r=t.className||"",i=r&&r.baseVal!==e;return n===e?i?r.baseVal:r:void(i?r.baseVal=n:t.className=n)}function Q(t){try{return t?"true"==t||("false"==t?!1:"null"==t?null:+t+""==t?+t:/^[\[\{]/.test(t)?r.parseJSON(t):t):t}catch(e){return t}}function tt(t,e){e(t);for(var n=0,r=t.childNodes.length;r>n;n++)tt(t.childNodes[n],e)}var e,n,r,i,O,P,o=[],s=o.concat,a=o.filter,u=o.slice,f=t.document,c={},l={},h={"column-count":1,columns:1,"font-weight":1,"line-height":1,opacity:1,"z-index":1,zoom:1},p=/^\s*<(\w+|!)[^>]*>/,d=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,m=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,g=/^(?:body|html)$/i,v=/([A-Z])/g,y=["val","css","html","text","data","width","height","offset"],x=["after","prepend","before","append"],b=f.createElement("table"),E=f.createElement("tr"),j={tr:f.createElement("tbody"),tbody:b,thead:b,tfoot:b,td:E,th:E,"*":f.createElement("div")},w=/complete|loaded|interactive/,T=/^[\w-]*$/,S={},C=S.toString,N={},A=f.createElement("div"),D={tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},L=Array.isArray||function(t){return t instanceof Array};return N.matches=function(t,e){if(!e||!t||1!==t.nodeType)return!1;var n=t.matches||t.webkitMatchesSelector||t.mozMatchesSelector||t.oMatchesSelector||t.matchesSelector;if(n)return n.call(t,e);var r,i=t.parentNode,o=!i;return o&&(i=A).appendChild(t),r=~N.qsa(i,e).indexOf(t),o&&A.removeChild(t),r},O=function(t){return t.replace(/-+(.)?/g,function(t,e){return e?e.toUpperCase():""})},P=function(t){return a.call(t,function(e,n){return t.indexOf(e)==n})},N.fragment=function(t,n,i){var o,s,a;return d.test(t)&&(o=r(f.createElement(RegExp.$1))),o||(t.replace&&(t=t.replace(m,"<$1></$2>")),n===e&&(n=p.test(t)&&RegExp.$1),n in j||(n="*"),a=j[n],a.innerHTML=""+t,o=r.each(u.call(a.childNodes),function(){a.removeChild(this)})),Z(i)&&(s=r(o),r.each(i,function(t,e){y.indexOf(t)>-1?s[t](e):s.attr(t,e)})),o},N.Z=function(t,e){return new X(t,e)},N.isZ=function(t){return t instanceof N.Z},N.init=function(t,n){var i;if(!t)return N.Z();if("string"==typeof t)if(t=t.trim(),"<"==t[0]&&p.test(t))i=N.fragment(t,RegExp.$1,n),t=null;else{if(n!==e)return r(n).find(t);i=N.qsa(f,t)}else{if(F(t))return r(f).ready(t);if(N.isZ(t))return t;if(L(t))i=q(t);else if(R(t))i=[t],t=null;else if(p.test(t))i=N.fragment(t.trim(),RegExp.$1,n),t=null;else{if(n!==e)return r(n).find(t);i=N.qsa(f,t)}}return N.Z(i,t)},r=function(t,e){return N.init(t,e)},r.extend=function(t){var e,n=u.call(arguments,1);return"boolean"==typeof t&&(e=t,t=n.shift()),n.forEach(function(n){J(t,n,e)}),t},N.qsa=function(t,e){var n,r="#"==e[0],i=!r&&"."==e[0],o=r||i?e.slice(1):e,s=T.test(o);return t.getElementById&&s&&r?(n=t.getElementById(o))?[n]:[]:1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType?[]:u.call(s&&!r&&t.getElementsByClassName?i?t.getElementsByClassName(o):t.getElementsByTagName(e):t.querySelectorAll(e))},r.contains=f.documentElement.contains?function(t,e){return t!==e&&t.contains(e)}:function(t,e){for(;e&&(e=e.parentNode);)if(e===t)return!0;return!1},r.type=$,r.isFunction=F,r.isWindow=k,r.isArray=L,r.isPlainObject=Z,r.isEmptyObject=function(t){var e;for(e in t)return!1;return!0},r.isNumeric=function(t){var e=Number(t),n=typeof t;return null!=t&&"boolean"!=n&&("string"!=n||t.length)&&!isNaN(e)&&isFinite(e)||!1},r.inArray=function(t,e,n){return o.indexOf.call(e,t,n)},r.camelCase=O,r.trim=function(t){return null==t?"":String.prototype.trim.call(t)},r.uuid=0,r.support={},r.expr={},r.noop=function(){},r.map=function(t,e){var n,i,o,r=[];if(z(t))for(i=0;i<t.length;i++)n=e(t[i],i),null!=n&&r.push(n);else for(o in t)n=e(t[o],o),null!=n&&r.push(n);return H(r)},r.each=function(t,e){var n,r;if(z(t)){for(n=0;n<t.length;n++)if(e.call(t[n],n,t[n])===!1)return t}else for(r in t)if(e.call(t[r],r,t[r])===!1)return t;return t},r.grep=function(t,e){return a.call(t,e)},t.JSON&&(r.parseJSON=JSON.parse),r.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(t,e){S["[object "+e+"]"]=e.toLowerCase()}),r.fn={constructor:N.Z,length:0,forEach:o.forEach,reduce:o.reduce,push:o.push,sort:o.sort,splice:o.splice,indexOf:o.indexOf,concat:function(){var t,e,n=[];for(t=0;t<arguments.length;t++)e=arguments[t],n[t]=N.isZ(e)?e.toArray():e;return s.apply(N.isZ(this)?this.toArray():this,n)},map:function(t){return r(r.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return r(u.apply(this,arguments))},ready:function(t){return w.test(f.readyState)&&f.body?t(r):f.addEventListener("DOMContentLoaded",function(){t(r)},!1),this},get:function(t){return t===e?u.call(this):this[t>=0?t:t+this.length]},toArray:function(){return this.get()},size:function(){return this.length},remove:function(){return this.each(function(){null!=this.parentNode&&this.parentNode.removeChild(this)})},each:function(t){return o.every.call(this,function(e,n){return t.call(e,n,e)!==!1}),this},filter:function(t){return F(t)?this.not(this.not(t)):r(a.call(this,function(e){return N.matches(e,t)}))},add:function(t,e){return r(P(this.concat(r(t,e))))},is:function(t){return this.length>0&&N.matches(this[0],t)},not:function(t){var n=[];if(F(t)&&t.call!==e)this.each(function(e){t.call(this,e)||n.push(this)});else{var i="string"==typeof t?this.filter(t):z(t)&&F(t.item)?u.call(t):r(t);this.forEach(function(t){i.indexOf(t)<0&&n.push(t)})}return r(n)},has:function(t){return this.filter(function(){return R(t)?r.contains(this,t):r(this).find(t).size()})},eq:function(t){return-1===t?this.slice(t):this.slice(t,+t+1)},first:function(){var t=this[0];return t&&!R(t)?t:r(t)},last:function(){var t=this[this.length-1];return t&&!R(t)?t:r(t)},find:function(t){var e,n=this;return e=t?"object"==typeof t?r(t).filter(function(){var t=this;return o.some.call(n,function(e){return r.contains(e,t)})}):1==this.length?r(N.qsa(this[0],t)):this.map(function(){return N.qsa(this,t)}):r()},closest:function(t,e){var n=[],i="object"==typeof t&&r(t);return this.each(function(r,o){for(;o&&!(i?i.indexOf(o)>=0:N.matches(o,t));)o=o!==e&&!M(o)&&o.parentNode;o&&n.indexOf(o)<0&&n.push(o)}),r(n)},parents:function(t){for(var e=[],n=this;n.length>0;)n=r.map(n,function(t){return(t=t.parentNode)&&!M(t)&&e.indexOf(t)<0?(e.push(t),t):void 0});return W(e,t)},parent:function(t){return W(P(this.pluck("parentNode")),t)},children:function(t){return W(this.map(function(){return U(this)}),t)},contents:function(){return this.map(function(){return this.contentDocument||u.call(this.childNodes)})},siblings:function(t){return W(this.map(function(t,e){return a.call(U(e.parentNode),function(t){return t!==e})}),t)},empty:function(){return this.each(function(){this.innerHTML=""})},pluck:function(t){return r.map(this,function(e){return e[t]})},show:function(){return this.each(function(){"none"==this.style.display&&(this.style.display=""),"none"==getComputedStyle(this,"").getPropertyValue("display")&&(this.style.display=B(this.nodeName))})},replaceWith:function(t){return this.before(t).remove()},wrap:function(t){var e=F(t);if(this[0]&&!e)var n=r(t).get(0),i=n.parentNode||this.length>1;return this.each(function(o){r(this).wrapAll(e?t.call(this,o):i?n.cloneNode(!0):n)})},wrapAll:function(t){if(this[0]){r(this[0]).before(t=r(t));for(var e;(e=t.children()).length;)t=e.first();r(t).append(this)}return this},wrapInner:function(t){var e=F(t);return this.each(function(n){var i=r(this),o=i.contents(),s=e?t.call(this,n):t;o.length?o.wrapAll(s):i.append(s)})},unwrap:function(){return this.parent().each(function(){r(this).replaceWith(r(this).children())}),this},clone:function(){return this.map(function(){return this.cloneNode(!0)})},hide:function(){return this.css("display","none")},toggle:function(t){return this.each(function(){var n=r(this);(t===e?"none"==n.css("display"):t)?n.show():n.hide()})},prev:function(t){return r(this.pluck("previousElementSibling")).filter(t||"*")},next:function(t){return r(this.pluck("nextElementSibling")).filter(t||"*")},html:function(t){return 0 in arguments?this.each(function(e){var n=this.innerHTML;r(this).empty().append(Y(this,t,e,n))}):0 in this?this[0].innerHTML:null},text:function(t){return 0 in arguments?this.each(function(e){var n=Y(this,t,e,this.textContent);this.textContent=null==n?"":""+n}):0 in this?this.pluck("textContent").join(""):null},attr:function(t,r){var i;return"string"!=typeof t||1 in arguments?this.each(function(e){if(1===this.nodeType)if(R(t))for(n in t)G(this,n,t[n]);else G(this,t,Y(this,r,e,this.getAttribute(t)))}):0 in this&&1==this[0].nodeType&&null!=(i=this[0].getAttribute(t))?i:e},removeAttr:function(t){return this.each(function(){1===this.nodeType&&t.split(" ").forEach(function(t){G(this,t)},this)})},prop:function(t,e){return t=D[t]||t,1 in arguments?this.each(function(n){this[t]=Y(this,e,n,this[t])}):this[0]&&this[0][t]},removeProp:function(t){return t=D[t]||t,this.each(function(){delete this[t]})},data:function(t,n){var r="data-"+t.replace(v,"-$1").toLowerCase(),i=1 in arguments?this.attr(r,n):this.attr(r);return null!==i?Q(i):e},val:function(t){return 0 in arguments?(null==t&&(t=""),this.each(function(e){this.value=Y(this,t,e,this.value)})):this[0]&&(this[0].multiple?r(this[0]).find("option").filter(function(){return this.selected}).pluck("value"):this[0].value)},offset:function(e){if(e)return this.each(function(t){var n=r(this),i=Y(this,e,t,n.offset()),o=n.offsetParent().offset(),s={top:i.top-o.top,left:i.left-o.left};"static"==n.css("position")&&(s.position="relative"),n.css(s)});if(!this.length)return null;if(f.documentElement!==this[0]&&!r.contains(f.documentElement,this[0]))return{top:0,left:0};var n=this[0].getBoundingClientRect();return{left:n.left+t.pageXOffset,top:n.top+t.pageYOffset,width:Math.round(n.width),height:Math.round(n.height)}},css:function(t,e){if(arguments.length<2){var i=this[0];if("string"==typeof t){if(!i)return;return i.style[O(t)]||getComputedStyle(i,"").getPropertyValue(t)}if(L(t)){if(!i)return;var o={},s=getComputedStyle(i,"");return r.each(t,function(t,e){o[e]=i.style[O(e)]||s.getPropertyValue(e)}),o}}var a="";if("string"==$(t))e||0===e?a=I(t)+":"+_(t,e):this.each(function(){this.style.removeProperty(I(t))});else for(n in t)t[n]||0===t[n]?a+=I(n)+":"+_(n,t[n])+";":this.each(function(){this.style.removeProperty(I(n))});return this.each(function(){this.style.cssText+=";"+a})},index:function(t){return t?this.indexOf(r(t)[0]):this.parent().children().indexOf(this[0])},hasClass:function(t){return t?o.some.call(this,function(t){return this.test(K(t))},V(t)):!1},addClass:function(t){return t?this.each(function(e){if("className"in this){i=[];var n=K(this),o=Y(this,t,e,n);o.split(/\s+/g).forEach(function(t){r(this).hasClass(t)||i.push(t)},this),i.length&&K(this,n+(n?" ":"")+i.join(" "))}}):this},removeClass:function(t){return this.each(function(n){if("className"in this){if(t===e)return K(this,"");i=K(this),Y(this,t,n,i).split(/\s+/g).forEach(function(t){i=i.replace(V(t)," ")}),K(this,i.trim())}})},toggleClass:function(t,n){return t?this.each(function(i){var o=r(this),s=Y(this,t,i,K(this));s.split(/\s+/g).forEach(function(t){(n===e?!o.hasClass(t):n)?o.addClass(t):o.removeClass(t)})}):this},scrollTop:function(t){if(this.length){var n="scrollTop"in this[0];return t===e?n?this[0].scrollTop:this[0].pageYOffset:this.each(n?function(){this.scrollTop=t}:function(){this.scrollTo(this.scrollX,t)})}},scrollLeft:function(t){if(this.length){var n="scrollLeft"in this[0];return t===e?n?this[0].scrollLeft:this[0].pageXOffset:this.each(n?function(){this.scrollLeft=t}:function(){this.scrollTo(t,this.scrollY)})}},position:function(){if(this.length){var t=this[0],e=this.offsetParent(),n=this.offset(),i=g.test(e[0].nodeName)?{top:0,left:0}:e.offset();return n.top-=parseFloat(r(t).css("margin-top"))||0,n.left-=parseFloat(r(t).css("margin-left"))||0,i.top+=parseFloat(r(e[0]).css("border-top-width"))||0,i.left+=parseFloat(r(e[0]).css("border-left-width"))||0,{top:n.top-i.top,left:n.left-i.left}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||f.body;t&&!g.test(t.nodeName)&&"static"==r(t).css("position");)t=t.offsetParent;return t})}},r.fn.detach=r.fn.remove,["width","height"].forEach(function(t){var n=t.replace(/./,function(t){return t[0].toUpperCase()});r.fn[t]=function(i){var o,s=this[0];return i===e?k(s)?s["inner"+n]:M(s)?s.documentElement["scroll"+n]:(o=this.offset())&&o[t]:this.each(function(e){s=r(this),s.css(t,Y(this,i,e,s[t]()))})}}),x.forEach(function(n,i){var o=i%2;r.fn[n]=function(){var n,a,s=r.map(arguments,function(t){var i=[];return n=$(t),"array"==n?(t.forEach(function(t){return t.nodeType!==e?i.push(t):r.zepto.isZ(t)?i=i.concat(t.get()):void(i=i.concat(N.fragment(t)))}),i):"object"==n||null==t?t:N.fragment(t)}),u=this.length>1;return s.length<1?this:this.each(function(e,n){a=o?n:n.parentNode,n=0==i?n.nextSibling:1==i?n.firstChild:2==i?n:null;var c=r.contains(f.documentElement,a);s.forEach(function(e){if(u)e=e.cloneNode(!0);else if(!a)return r(e).remove();a.insertBefore(e,n),c&&tt(e,function(e){if(!(null==e.nodeName||"SCRIPT"!==e.nodeName.toUpperCase()||e.type&&"text/javascript"!==e.type||e.src)){var n=e.ownerDocument?e.ownerDocument.defaultView:t;n.eval.call(n,e.innerHTML)}})})})},r.fn[o?n+"To":"insert"+(i?"Before":"After")]=function(t){return r(t)[n](this),this}}),N.Z.prototype=X.prototype=r.fn,N.uniq=P,N.deserializeValue=Q,r.zepto=N,r}();return t.Zepto=e,void 0===t.$&&(t.$=e),function(e){function h(t){return t._zid||(t._zid=n++)}function p(t,e,n,r){if(e=d(e),e.ns)var i=m(e.ns);return(a[h(t)]||[]).filter(function(t){return t&&(!e.e||t.e==e.e)&&(!e.ns||i.test(t.ns))&&(!n||h(t.fn)===h(n))&&(!r||t.sel==r)})}function d(t){var e=(""+t).split(".");return{e:e[0],ns:e.slice(1).sort().join(" ")}}function m(t){return new RegExp("(?:^| )"+t.replace(" "," .* ?")+"(?: |$)")}function g(t,e){return t.del&&!f&&t.e in c||!!e}function v(t){return l[t]||f&&c[t]||t}function y(t,n,i,o,s,u,f){var c=h(t),p=a[c]||(a[c]=[]);n.split(/\s/).forEach(function(n){if("ready"==n)return e(document).ready(i);var a=d(n);a.fn=i,a.sel=s,a.e in l&&(i=function(t){var n=t.relatedTarget;return!n||n!==this&&!e.contains(this,n)?a.fn.apply(this,arguments):void 0}),a.del=u;var c=u||i;a.proxy=function(e){if(e=T(e),!e.isImmediatePropagationStopped()){e.data=o;var n=c.apply(t,e._args==r?[e]:[e].concat(e._args));return n===!1&&(e.preventDefault(),e.stopPropagation()),n}},a.i=p.length,p.push(a),"addEventListener"in t&&t.addEventListener(v(a.e),a.proxy,g(a,f))})}function x(t,e,n,r,i){var o=h(t);(e||"").split(/\s/).forEach(function(e){p(t,e,n,r).forEach(function(e){delete a[o][e.i],"removeEventListener"in t&&t.removeEventListener(v(e.e),e.proxy,g(e,i))})})}function T(t,n){return(n||!t.isDefaultPrevented)&&(n||(n=t),e.each(w,function(e,r){var i=n[e];t[e]=function(){return this[r]=b,i&&i.apply(n,arguments)},t[r]=E}),t.timeStamp||(t.timeStamp=Date.now()),(n.defaultPrevented!==r?n.defaultPrevented:"returnValue"in n?n.returnValue===!1:n.getPreventDefault&&n.getPreventDefault())&&(t.isDefaultPrevented=b)),t}function S(t){var e,n={originalEvent:t};for(e in t)j.test(e)||t[e]===r||(n[e]=t[e]);return T(n,t)}var r,n=1,i=Array.prototype.slice,o=e.isFunction,s=function(t){return"string"==typeof t},a={},u={},f="onfocusin"in t,c={focus:"focusin",blur:"focusout"},l={mouseenter:"mouseover",mouseleave:"mouseout"};u.click=u.mousedown=u.mouseup=u.mousemove="MouseEvents",e.event={add:y,remove:x},e.proxy=function(t,n){var r=2 in arguments&&i.call(arguments,2);if(o(t)){var a=function(){return t.apply(n,r?r.concat(i.call(arguments)):arguments)};return a._zid=h(t),a}if(s(n))return r?(r.unshift(t[n],t),e.proxy.apply(null,r)):e.proxy(t[n],t);throw new TypeError("expected function")},e.fn.bind=function(t,e,n){return this.on(t,e,n)},e.fn.unbind=function(t,e){return this.off(t,e)},e.fn.one=function(t,e,n,r){return this.on(t,e,n,r,1)};var b=function(){return!0},E=function(){return!1},j=/^([A-Z]|returnValue$|layer[XY]$|webkitMovement[XY]$)/,w={preventDefault:"isDefaultPrevented",stopImmediatePropagation:"isImmediatePropagationStopped",stopPropagation:"isPropagationStopped"};e.fn.delegate=function(t,e,n){return this.on(e,t,n)},e.fn.undelegate=function(t,e,n){return this.off(e,t,n)},e.fn.live=function(t,n){return e(document.body).delegate(this.selector,t,n),this},e.fn.die=function(t,n){return e(document.body).undelegate(this.selector,t,n),this},e.fn.on=function(t,n,a,u,f){var c,l,h=this;return t&&!s(t)?(e.each(t,function(t,e){h.on(t,n,a,e,f)}),h):(s(n)||o(u)||u===!1||(u=a,a=n,n=r),(u===r||a===!1)&&(u=a,a=r),u===!1&&(u=E),h.each(function(r,o){f&&(c=function(t){return x(o,t.type,u),u.apply(this,arguments)}),n&&(l=function(t){var r,s=e(t.target).closest(n,o).get(0);return s&&s!==o?(r=e.extend(S(t),{currentTarget:s,liveFired:o}),(c||u).apply(s,[r].concat(i.call(arguments,1)))):void 0}),y(o,t,u,a,n,l||c)}))},e.fn.off=function(t,n,i){var a=this;return t&&!s(t)?(e.each(t,function(t,e){a.off(t,n,e)}),a):(s(n)||o(i)||i===!1||(i=n,n=r),i===!1&&(i=E),a.each(function(){x(this,t,i,n)}))},e.fn.trigger=function(t,n){return t=s(t)||e.isPlainObject(t)?e.Event(t):T(t),t._args=n,this.each(function(){t.type in c&&"function"==typeof this[t.type]?this[t.type]():"dispatchEvent"in this?this.dispatchEvent(t):e(this).triggerHandler(t,n)})},e.fn.triggerHandler=function(t,n){var r,i;return this.each(function(o,a){r=S(s(t)?e.Event(t):t),r._args=n,r.target=a,e.each(p(a,t.type||t),function(t,e){return i=e.proxy(r),r.isImmediatePropagationStopped()?!1:void 0})}),i},"focusin focusout focus blur load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select keydown keypress keyup error".split(" ").forEach(function(t){e.fn[t]=function(e){return 0 in arguments?this.bind(t,e):this.trigger(t)}}),e.Event=function(t,e){s(t)||(e=t,t=e.type);var n=document.createEvent(u[t]||"Events"),r=!0;if(e)for(var i in e)"bubbles"==i?r=!!e[i]:n[i]=e[i];return n.initEvent(t,r,!0),T(n)}}(e),function(e){function p(t,n,r){var i=e.Event(n);return e(t).trigger(i,r),!i.isDefaultPrevented()}function d(t,e,n,i){return t.global?p(e||r,n,i):void 0}function m(t){t.global&&0===e.active++&&d(t,null,"ajaxStart")}function g(t){t.global&&!--e.active&&d(t,null,"ajaxStop")}function v(t,e){var n=e.context;return e.beforeSend.call(n,t,e)===!1||d(e,n,"ajaxBeforeSend",[t,e])===!1?!1:void d(e,n,"ajaxSend",[t,e])}function y(t,e,n,r){var i=n.context,o="success";n.success.call(i,t,o,e),r&&r.resolveWith(i,[t,o,e]),d(n,i,"ajaxSuccess",[e,n,t]),b(o,e,n)}function x(t,e,n,r,i){var o=r.context;r.error.call(o,n,e,t),i&&i.rejectWith(o,[n,e,t]),d(r,o,"ajaxError",[n,r,t||e]),b(e,n,r)}function b(t,e,n){var r=n.context;n.complete.call(r,e,t),d(n,r,"ajaxComplete",[e,n]),g(n)}function E(t,e,n){if(n.dataFilter==j)return t;var r=n.context;return n.dataFilter.call(r,t,e)}function j(){}function w(t){return t&&(t=t.split(";",2)[0]),t&&(t==c?"html":t==f?"json":a.test(t)?"script":u.test(t)&&"xml")||"text"}function T(t,e){return""==e?t:(t+"&"+e).replace(/[&?]{1,2}/,"?")}function S(t){t.processData&&t.data&&"string"!=e.type(t.data)&&(t.data=e.param(t.data,t.traditional)),!t.data||t.type&&"GET"!=t.type.toUpperCase()&&"jsonp"!=t.dataType||(t.url=T(t.url,t.data),t.data=void 0)}function C(t,n,r,i){return e.isFunction(n)&&(i=r,r=n,n=void 0),e.isFunction(r)||(i=r,r=void 0),{url:t,data:n,success:r,dataType:i}}function O(t,n,r,i){var o,s=e.isArray(n),a=e.isPlainObject(n);e.each(n,function(n,u){o=e.type(u),i&&(n=r?i:i+"["+(a||"object"==o||"array"==o?n:"")+"]"),!i&&s?t.add(u.name,u.value):"array"==o||!r&&"object"==o?O(t,u,r,n):t.add(n,u)})}var i,o,n=+new Date,r=t.document,s=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,a=/^(?:text|application)\/javascript/i,u=/^(?:text|application)\/xml/i,f="application/json",c="text/html",l=/^\s*$/,h=r.createElement("a");h.href=t.location.href,e.active=0,e.ajaxJSONP=function(i,o){if(!("type"in i))return e.ajax(i);var c,p,s=i.jsonpCallback,a=(e.isFunction(s)?s():s)||"Zepto"+n++,u=r.createElement("script"),f=t[a],l=function(t){e(u).triggerHandler("error",t||"abort")},h={abort:l};return o&&o.promise(h),e(u).on("load error",function(n,r){clearTimeout(p),e(u).off().remove(),"error"!=n.type&&c?y(c[0],h,i,o):x(null,r||"error",h,i,o),t[a]=f,c&&e.isFunction(f)&&f(c[0]),f=c=void 0}),v(h,i)===!1?(l("abort"),h):(t[a]=function(){c=arguments},u.src=i.url.replace(/\?(.+)=\?/,"?$1="+a),r.head.appendChild(u),i.timeout>0&&(p=setTimeout(function(){l("timeout")},i.timeout)),h)},e.ajaxSettings={type:"GET",beforeSend:j,success:j,error:j,complete:j,context:null,global:!0,xhr:function(){return new t.XMLHttpRequest},accepts:{script:"text/javascript, application/javascript, application/x-javascript",json:f,xml:"application/xml, text/xml",html:c,text:"text/plain"},crossDomain:!1,timeout:0,processData:!0,cache:!0,dataFilter:j},e.ajax=function(n){var u,f,s=e.extend({},n||{}),a=e.Deferred&&e.Deferred();for(i in e.ajaxSettings)void 0===s[i]&&(s[i]=e.ajaxSettings[i]);m(s),s.crossDomain||(u=r.createElement("a"),u.href=s.url,u.href=u.href,s.crossDomain=h.protocol+"//"+h.host!=u.protocol+"//"+u.host),s.url||(s.url=t.location.toString()),(f=s.url.indexOf("#"))>-1&&(s.url=s.url.slice(0,f)),S(s);var c=s.dataType,p=/\?.+=\?/.test(s.url);if(p&&(c="jsonp"),s.cache!==!1&&(n&&n.cache===!0||"script"!=c&&"jsonp"!=c)||(s.url=T(s.url,"_="+Date.now())),"jsonp"==c)return p||(s.url=T(s.url,s.jsonp?s.jsonp+"=?":s.jsonp===!1?"":"callback=?")),e.ajaxJSONP(s,a);var P,d=s.accepts[c],g={},b=function(t,e){g[t.toLowerCase()]=[t,e]},C=/^([\w-]+:)\/\//.test(s.url)?RegExp.$1:t.location.protocol,N=s.xhr(),O=N.setRequestHeader;if(a&&a.promise(N),s.crossDomain||b("X-Requested-With","XMLHttpRequest"),b("Accept",d||"*/*"),(d=s.mimeType||d)&&(d.indexOf(",")>-1&&(d=d.split(",",2)[0]),N.overrideMimeType&&N.overrideMimeType(d)),(s.contentType||s.contentType!==!1&&s.data&&"GET"!=s.type.toUpperCase())&&b("Content-Type",s.contentType||"application/x-www-form-urlencoded"),s.headers)for(o in s.headers)b(o,s.headers[o]);if(N.setRequestHeader=b,N.onreadystatechange=function(){if(4==N.readyState){N.onreadystatechange=j,clearTimeout(P);var t,n=!1;if(N.status>=200&&N.status<300||304==N.status||0==N.status&&"file:"==C){if(c=c||w(s.mimeType||N.getResponseHeader("content-type")),"arraybuffer"==N.responseType||"blob"==N.responseType)t=N.response;else{t=N.responseText;try{t=E(t,c,s),"script"==c?(1,eval)(t):"xml"==c?t=N.responseXML:"json"==c&&(t=l.test(t)?null:e.parseJSON(t))}catch(r){n=r}if(n)return x(n,"parsererror",N,s,a)}y(t,N,s,a)}else x(N.statusText||null,N.status?"error":"abort",N,s,a)}},v(N,s)===!1)return N.abort(),x(null,"abort",N,s,a),N;var A="async"in s?s.async:!0;if(N.open(s.type,s.url,A,s.username,s.password),s.xhrFields)for(o in s.xhrFields)N[o]=s.xhrFields[o];for(o in g)O.apply(N,g[o]);return s.timeout>0&&(P=setTimeout(function(){N.onreadystatechange=j,N.abort(),x(null,"timeout",N,s,a)},s.timeout)),N.send(s.data?s.data:null),N},e.get=function(){return e.ajax(C.apply(null,arguments))},e.post=function(){var t=C.apply(null,arguments);return t.type="POST",e.ajax(t)},e.getJSON=function(){var t=C.apply(null,arguments);return t.dataType="json",e.ajax(t)},e.fn.load=function(t,n,r){if(!this.length)return this;var a,i=this,o=t.split(/\s/),u=C(t,n,r),f=u.success;return o.length>1&&(u.url=o[0],a=o[1]),u.success=function(t){i.html(a?e("<div>").html(t.replace(s,"")).find(a):t),f&&f.apply(i,arguments)},e.ajax(u),this};var N=encodeURIComponent;e.param=function(t,n){var r=[];return r.add=function(t,n){e.isFunction(n)&&(n=n()),null==n&&(n=""),this.push(N(t)+"="+N(n))},O(r,t,n),r.join("&").replace(/%20/g,"+")}}(e),function(t){t.fn.serializeArray=function(){var e,n,r=[],i=function(t){return t.forEach?t.forEach(i):void r.push({name:e,value:t})};return this[0]&&t.each(this[0].elements,function(r,o){n=o.type,e=o.name,e&&"fieldset"!=o.nodeName.toLowerCase()&&!o.disabled&&"submit"!=n&&"reset"!=n&&"button"!=n&&"file"!=n&&("radio"!=n&&"checkbox"!=n||o.checked)&&i(t(o).val())}),r},t.fn.serialize=function(){var t=[];return this.serializeArray().forEach(function(e){t.push(encodeURIComponent(e.name)+"="+encodeURIComponent(e.value))}),t.join("&")},t.fn.submit=function(e){if(0 in arguments)this.bind("submit",e);else if(this.length){var n=t.Event("submit");this.eq(0).trigger(n),n.isDefaultPrevented()||this.get(0).submit()}return this}}(e),function(){try{getComputedStyle(void 0)}catch(e){var n=getComputedStyle;t.getComputedStyle=function(t,e){try{return n(t,e)}catch(r){return null}}}}(),e});

const WS_STATUS = {
    CONNECTING: 0,
    OPEN: 1,
    CLOSING: 2,
    CLOSED:	3
};
const HIDE_TYPING = 30000;

FPTAI_LiveChat = (function ($, undefined) {
    function LiveChat(objLiveChat, baseUrl, fptaiEndpointParam, voiceEnabled, voice, speed) {
        let fptaiEndpoint = 'wss://bot.fpt.ai/ws/livechat';
        if (fptaiEndpointParam != undefined) {
            fptaiEndpoint = fptaiEndpointParam;
        }
        let renderer, chatLog, voiceService, fptaiService,
            slideIndex = 0,
            isSelectedSlide = false,
            userNameChatLive = '',
            persistentMenu = {
                list: null,
                level: 1,
                currentItemId: '',
                currentItemTitle: '',
                previousList: null
            }, currentScroll = 0, isShowHistory = false;
		var isFirstChating = false;
        var lastScrollTop = 0;
        var activeScrollAction = true;
        var scrollTopUserLastMessage = 0;
        // customize icon chat
        var iconUser = baseUrl + '/resource/logossi_m.jpg';
        var iconBot = baseUrl + '/resource/ic-avatar.svg';

        var fptai_chatbox_is_opened = false;
        
        // $('head').append('<link id="chatboxStyle" rel="stylesheet" type="text/css" href="' + baseUrl + '/livechat.css" media="all">');
		// $('head').append('<link id="chatboxJqueryMobile" rel="stylesheet" type="text/css" href="' + baseUrl + '/jquery.mobile-1.5.0-alpha.1.min.css"');
        // $('head').append('<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">');
        // $('head').append('<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.1/css/all.css" integrity="sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf" crossorigin="anonymous">');

        var $head = $("head");
        var $headlinkfirst = $head.find("link");
        // var linkElement = `<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">`;
        let linkbt = document.createElement('link');
        linkbt.id = 'import_link_bt_css_fpt_ai';
        linkbt.rel = 'stylesheet';
        linkbt.href = 'https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css';

        // Check if Browser is Internet Explorer 6-11
        let isIE = /*@cc_on!@*/false || !!document.documentMode;

        let linkchatboxStyle = document.createElement('link');
        linkchatboxStyle.id = 'import_link_chatboxStyle_fpt_ai';
        linkchatboxStyle.rel = 'stylesheet';
        if (isIE) {
            linkchatboxStyle.href = baseUrl + '/livechat-ie.css';
        } else {
            linkchatboxStyle.href = baseUrl + '/livechat.css';
        }

        let linkchatboxJqueryMobile = document.createElement('link');
        linkchatboxJqueryMobile.id = 'import_link_chatboxJqueryMobile_fpt_ai';
        linkchatboxJqueryMobile.rel = 'stylesheet';
        linkchatboxJqueryMobile.href = baseUrl + '/jquery.mobile-1.5.0-alpha.1.min.css';

        let linkfontawesome = document.createElement('link');
        linkfontawesome.id = 'import_link_fontawesome_fpt_ai';
        linkfontawesome.rel = 'stylesheet';
        linkfontawesome.href = 'https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css';

        let linkfontai = document.createElement('link');
        linkfontai.id = 'import_link_fontai_fpt_ai';
        linkfontai.rel = 'stylesheet';
        linkfontai.href = baseUrl + '/icon-ai/style.css';
        
        if ($headlinkfirst.length){
            //    $headlinkfirst[0].before(linkbt);

            //    $headlinkfirst[0].before(linkchatboxStyle);
            //    $headlinkfirst[0].before(linkchatboxJqueryMobile);
            //    $headlinkfirst[0].before(linkfontawesome);
            //    $headlinkfirst[0].before(linkfontai);

            // $head[0].insertBefore(linkbt, $headlinkfirst[0]);
            $head[0].insertBefore(linkchatboxStyle, $headlinkfirst[0]);
            $head[0].insertBefore(linkchatboxJqueryMobile, $headlinkfirst[0]);
            $head[0].insertBefore(linkfontawesome, $headlinkfirst[0]);
            $head[0].insertBefore(linkfontai, $headlinkfirst[0]);
        }
        else {
        //    $head.append(linkbt);
           $head.append(linkchatboxStyle);
           $head.append(linkchatboxJqueryMobile);
           $head.append(linkfontawesome);
           $head.append(linkfontai);
        }

		$(document.body).append('<script src="' + baseUrl + '/jquery.mobile-1.5.0-alpha.1.min.js"></script>');
        $.get(baseUrl + "/template.html", function (resp) {
            $(document.body).append(resp);
            
            if (objLiveChat.thumb && objLiveChat.thumb !== "") {
                $("#btnBoxComp").css('background-image', 'url(' + objLiveChat.thumb + ') !important;');
            }

            renderer = new Renderer('#divChatHistory', baseUrl);
            fptaiService = new FPTAIService(objLiveChat.appCode);

            initChatbox();
			
			/* $('#divChatHistory').on('mousewheel', function(e){
                showHideAddressBar(e.wheelDelta >= 0);
            }) */
			
			$('#divChatHistory').on('scroll', function(e){
                if (activeScrollAction) {
                    scrollTopUserLastMessage = 0;
                    /* console.log(e);
                    console.log($(this)); */
                    var st = $(this)[0].scrollTop;
                    if (st - lastScrollTop > 70){
                        // downscroll code
                        showHideAddressBar(false);
                        lastScrollTop = st <= 0 ? 0 : st;
                    } else if (st - lastScrollTop < -70){
                        // upscroll code
                        showHideAddressBar(true);
                        lastScrollTop = st <= 0 ? 0 : st;
                    }
                    
                    // if ($(this)[0].scrollTop === $(this)[0].scrollHeight) {
                    //     lastScrollTop = $(this)[0].scrollHeight;
                    // }
                }
                
            });

            chatLog = new ChatLog(objLiveChat.appCode);
            chatLog.renderPreviousChat();
            chatLog.renderSlideShow(false);

            if (voiceEnabled) {
                voiceService = new VoiceService(voice, speed);
                voiceService.initVoice();
            }

            // check variable turn_off_auto_box_chat to run
            if (!objLiveChat.turn_off_auto_box_chat) {
                // Open chatbox after 5s page load success
                setTimeout(function() {
                    if (!fptai_chatbox_is_opened) {
                        $('#btnBoxComp').click();
                    }
                    
                }, 5000);
            }

        });

        function initChatbox() {
            $('#btnSendMsgChat').addClass('no-message');

            // $('#btnBoxComp').on('mouseover', function () {
            //     //$(this).hide();
            //     $('#divContainerChatBox').show();
            //     $('.modal-backdrop')
            //     updateCarouselHeight($('.carousel-box .content .item.current'));
            //     fptaiService.initWebSocket();
            //     $('#txtChatText').focus();
            //     //scrollToLatestMessage(true);
            //     if(!isShowHistory) {
            //        const scrollHeight = $('#divChatHistory')[0].scrollHeight;
            //        $('#divChatHistory').scrollTop(chatLog.loadHistory().length > 0 ? scrollHeight : 0);
            //         isShowHistory = true;
            //     }
            // });
            $('#txtNameBox').text(objLiveChat.appName);
            $('#btnBoxComp').click(function() {

                fptai_chatbox_is_opened = true;

                // $('#btnBoxCompTitle.cssFptAiChatBox')[0].setAttribute('style', 'display: none !important;');
				
				if ($('#divContainerChatBox') && $('#divContainerChatBox').length > 0) {
					if ($('#divContainerChatBox')[0].style.display === 'none') {
                        $('#btnBoxCompTitle.cssFptAiChatBox')[0].setAttribute('style', 'display: none !important;');
						$('#divContainerChatBox').show();
						$('.modal-backdrop')
						updateCarouselHeight($('.carousel-box .content .item.current'));
						fptaiService.initWebSocket();
						$('#txtChatText').focus();
						//scrollToLatestMessage(true);
						// if(!isShowHistory) {
						//    const scrollHeight = $('#divChatHistory')[0].scrollHeight;
						//    $('#divChatHistory').scrollTop(chatLog.loadHistory().length > 0 ? scrollHeight : 0);
						// 	isShowHistory = true;
                        // }
                        if (!isFirstChating) {
                            // console.log('open - show header - scroll bottom')
                            activeScrollAction = false;
                            showHideAddressBar(true);
                            $("#divChatHistory").scrollTop($('#divChatHistory')[0].scrollHeight)
                            setTimeout(function () {
                                activeScrollAction = true;
                            }, 500);
                            
                        }

					} else {
                        $('#btnBoxCompTitle.cssFptAiChatBox')[0].setAttribute('style', 'display: block !important;');
                        updateCarouselHeight($('.carousel-box .content .item.current'));
						$('#divContainerChatBox').toggle();			
					}
				}
				
            })
            $('#headerBoxChat').on('click', function () {
                $('#divContainerChatBox').hide();
                $('#btnBoxCompTitle.cssFptAiChatBox')[0].setAttribute('style', 'display: block !important;');
                $('#btnBoxComp').show();
            });

            function sendTextMessage(msg) {
                hideAllQuickreplyButtonsGroup()
                let senderName = fptaiService.getSenderName();
                fptaiService.sendMessage({
                    'type': 'text',
                    'content': msg,
                    'sender_name': senderName
                });
                // chatLog.appendUserChatLog(msg);
            }

            $('#txtChatText').on('keyup', function (event) {
                var msg = $(this).val();
                if (msg == '') {
                    $('#btnSendMsgChat').removeClass('has-message').addClass('no-message');
                } else {
                    $('#btnSendMsgChat').removeClass('no-message').addClass('has-message');
                }
                if (event.keyCode == 13) {
                    if (msg == '') {
                        //console.log('error');
                        return
                    } else {
                        scrollTopUserLastMessage = $('#divChatHistory')[0].scrollHeight - 5;
						isFirstChating = false;
                        currentScroll = 0;
                        sendTextMessage(msg);
                        $(this).val('');
                        $('#btnSendMsgChat').removeClass('has-message').addClass('no-message');
                        $('.loading-message').remove();
                        showHideAddressBar();
                        const scrollHeight = $('#divChatHistory')[0].scrollHeight;
                        // console.log('scroll 1')
                        $('#divChatHistory').scrollTop(scrollHeight);
                        scrollToLatestMessage();
                    }
                }

            });

            $('#btnSendMsgChat').on('click', function () {
                // scrollTopUserLastMessage = $('#divChatHistory')[0].scrollHeight - 5;
                var txtChatEle = $("#txtChatText");
                var msg = txtChatEle.val();
                if (msg == '') {
                    txtChatEle.focus();
                } else {
                    scrollTopUserLastMessage = $('#divChatHistory')[0].scrollHeight - 5;
                    isFirstChating = false;
                    currentScroll = 0;
                    sendTextMessage(msg);
                    txtChatEle.val('');
                    txtChatEle.focus();
                }
            });

            $('.close_spanClose').on('click', function () {
                $('#id_liveChat_img_modal').hide();
            });

            $('#b-persistent-menu-live-chat').click(function () {
                if($('#b-persistent-menu-live-chat__content').css('display') === 'none') {
                    $('#b-persistent-menu-live-chat__content').css('display', 'block');
                    persistentMenu.level = 1;
                    fptaiService.initStylePersistentMenu(persistentMenu.list);
                    $('#b-persistent-menu-live-chat__content header strong').text('Menu');
                } else {
                    $('#b-persistent-menu-live-chat__content header').off('click');
                    $('#b-persistent-menu-live-chat__content').css('display', 'none');
                    persistentMenu.level = 1;
                }
            });
            $(window).click(function (e) {
                if(!$(e.target).parents('#b-persistent-menu-live-chat__content').length &&
                    $(e.target).attr('id') !== 'b-persistent-menu-live-chat' &&
                    $(e.target).attr('id') !== 'btn-persistent-menu-live-chat' &&
                    $(e.target).attr('id') !== 'btn-i-persistent-menu-live-chat' &&
                    $(e.target).attr('id') !== 'back-to-step' &&
                    $(e.target).attr('class') !== 'menu-item-persistent-menu' &&
                    $(e.target).attr('class') !== 'item-persistent-menu' &&
                    $(e.target).attr('class') !== 'b-persistent-menu-live-chat__arrow-right') {
                        $('#b-persistent-menu-live-chat__content header').off('click');
                        $('#b-persistent-menu-live-chat__content').hide();
                        persistentMenu.level = 1;
                }
            });

            // use for Safari in iOs
            $(window).bind("click touchstart", function(e){
                if(!$(e.target).parents('#b-persistent-menu-live-chat__content').length &&
                    $(e.target).attr('id') !== 'b-persistent-menu-live-chat' &&
                    $(e.target).attr('id') !== 'btn-persistent-menu-live-chat' &&
                    $(e.target).attr('id') !== 'btn-i-persistent-menu-live-chat' &&
                    $(e.target).attr('id') !== 'back-to-step' &&
                    $(e.target).attr('class') !== 'menu-item-persistent-menu' &&
                    $(e.target).attr('class') !== 'item-persistent-menu' &&
                    $(e.target).attr('class') !== 'b-persistent-menu-live-chat__arrow-right') {
                    $('#b-persistent-menu-live-chat__content header').off('click');
                    $('#b-persistent-menu-live-chat__content').hide();
                    persistentMenu.level = 1;
                }
            });
        }

        function swipedetect(el, callback){

            let touchsurface = el,
            swipedir,
            startX,
            startY,
            distX,
            distY,
            threshold = 150, //required min distance traveled to be considered swipe
            restraint = 100, // maximum distance allowed at the same time in perpendicular direction
            allowedTime = 300, // maximum time allowed to travel that distance
            elapsedTime,
            startTime,
            handleswipe = callback || function(swipedir){}

            touchsurface.addEventListener('touchstart', function(e){
                let touchobj = e.changedTouches[0]
                swipedir = 'none'
                dist = 0
                startX = touchobj.pageX
                startY = touchobj.pageY
                startTime = new Date().getTime() // record time when finger first makes contact with surface
                e.preventDefault()
            }, false)

            touchsurface.addEventListener('touchmove', function(e){
                e.preventDefault() // prevent scrolling when inside DIV
            }, false)

            touchsurface.addEventListener('touchend', function(e){
                let touchobj = e.changedTouches[0]
                distX = touchobj.pageX - startX // get horizontal dist traveled by finger while in contact with surface
                distY = touchobj.pageY - startY // get vertical dist traveled by finger while in contact with surface
                elapsedTime = new Date().getTime() - startTime // get time elapsed
                if (elapsedTime <= allowedTime){ // first condition for awipe met
                    if (Math.abs(distX) >= threshold && Math.abs(distY) <= restraint){ // 2nd condition for horizontal swipe met
                        swipedir = (distX < 0)? 'left' : 'right' // if dist traveled is negative, it indicates left swipe
                    }
                    else if (Math.abs(distY) >= threshold && Math.abs(distX) <= restraint){ // 2nd condition for vertical swipe met
                        swipedir = (distY < 0)? 'up' : 'down' // if dist traveled is negative, it indicates up swipe
                    }
                }
                handleswipe(swipedir)
                e.preventDefault()
            }, false)
        }

        function showHideAddressBar(isShow) {
            // activeScrollAction = false;
            // if(!isShow) {
            //     $('#headerBoxChat section').removeClass("slidedown").addClass("slideup"); //your Scroll down data here
            //     $('.cssHistoryBox').css({
            //          height : 'calc(100% - 104px)',
            //          top: 50
            //      });

            // } else {
            //     $('#headerBoxChat section').removeClass("slideup").addClass("slidedown"); //your Scroll up data here
            //      $('.cssHistoryBox').css({
            //          height : 'calc(100% - 180px)',
            //          top: 125
            //      });
            // }
            // setTimeout(() => {
            //     lastScrollTop = $("#divChatHistory")[0].scrollTop;
            //     activeScrollAction = true;
            // }, 500);

        }

        function scrollToLatestMessage(isShowToolbar) {
            //$('#divChatHistory').scrollTop($('#divChatHistory').prop('scrollHeight'));
            // $('#divChatHistory').scrollTop(0);
            showHideAddressBar(isShowToolbar);
            // var el = document.getElementById('divChatHistory');
            // swipedetect(el, function(swipedir){
            //     // el.innerHTML = 'Swiped <span style="color:yellow;margin: 0 5px;">' + swipedir +'</span>';
            //     if(swipedir === 'up') {
            //         $('#headerBoxChat section').removeClass("slideup").addClass("slidedown");
            //     } else if(swipedir === 'down') {
            //         $('#headerBoxChat section').removeClass("slidedown").addClass("slideup");
            //     }
            // });
            // $('#divChatHistory').on('mousewheel', function(e){
            //     showHideAddressBar(e.wheelDelta >= 0);
            // })
        }

        function waitingResponsingMessage() {
                if(!$('#divChatHistory').find('.loader-live-chat').length) {
                     $('#divChatHistory').append("<div class='cssBoxMsgContainer block-pendding-message loading-message'><div class='cssBoxContainer'><div class='cssBoxChatMsg_cont box-content loader-live-chat'><span class='dot'></span><span class='dot'></span><span class='dot'></span></div></div></div>");
                    //scrollToLatestMessage();
                }
            }

        function updateCarouselHeight(ele) {
			// resize carousel cards
			let lstCarousel = $('.livechat-fptai-slider-container');
			if (lstCarousel && lstCarousel.length > 0) {
				lstCarousel.forEach( function (c) {
                    let actHeight = c.offsetHeight;
					let maxChildrenHeight = 0;
					if (c.children && c.children.length > 0) {
						let c0 = c.children[0];
						if (c0.children && c0.children.length > 0) {
							/* c0.children.forEach( t => {
								maxChildrenHeight = maxChildrenHeight > t ? maxChildrenHeight : t;
							}); */
							for (let i = 0; i < c0.children.length; i++) {
								maxChildrenHeight = maxChildrenHeight > c0.children[i].offsetHeight ? maxChildrenHeight : c0.children[i].offsetHeight;
							}
						}
                    }
                    if (maxChildrenHeight > actHeight) {
                        let addPadding = maxChildrenHeight - actHeight + 35;
						c.style.paddingBottom = addPadding + 'px';
                    } else if (maxChildrenHeight + 20 > actHeight) {
						let addPadding = maxChildrenHeight - actHeight + 20;
						c.style.paddingBottom = addPadding + 'px';
					}
				});
			}
            var height = ele.prop('scrollHeight');
            ele.closest('.carousel-box').css('height', height + 'px');
            ele.closest('.carousel-box').find('.item').css('top', (height + 10) + 'px');
            ele.css('top', '0');
        }

        function FPTAIService(appCode) {
            let ws;
            let clientId = '';
            let isFirstTime = false, isExistLiveChat = false;
            let _this = this;
            let intervalConnectLivechat = null;
            let isShowButtonConnect = false;
            let storeLivechatClient = JSON.parse(localStorage.getItem('fptai_livechat_client') ? localStorage.getItem('fptai_livechat_client') : '[]');
            storeLivechatClient = storeLivechatClient || [];
            for(let i = 0 ; i < storeLivechatClient.length; i++) {
                if(storeLivechatClient[i].appCode === appCode) {
                    isExistLiveChat = true;
                    clientId = storeLivechatClient[i].clientId;
                    break;
                }
            }
            if(!isExistLiveChat) {
                let objectLiveChat = {
                    appCode: appCode,
                    clientId: MD5(guid() + appCode)
                };
                clientId = objectLiveChat.clientId;
                storeLivechatClient.push(objectLiveChat);
                localStorage.setItem('fptai_livechat_client', JSON.stringify(storeLivechatClient));
            }

            this.initWebSocket = function () {
                if (ws) {
                    return;
                }
                ws = new WebSocket(fptaiEndpoint + '/' + appCode + '/' + clientId + '/');

                ws.onopen = function () {
                    //console.log("Opened connection to FPTAI WS");
                    isShowButtonConnect = false;

                    let require_user_info_display_text_1 = 'Xin quý khách vui lòng nhập tên';
                    let require_user_info_display_text_2 = '';
                    if (objLiveChat.require_user_info_text_vn && objLiveChat.require_user_info_text_vn.trim() !== '') {
                        require_user_info_display_text_1 = objLiveChat.require_user_info_text_vn.trim()
                    }
                    if (objLiveChat.require_user_info_text_en && objLiveChat.require_user_info_text_en.trim() !== '') {
                        require_user_info_display_text_2 = objLiveChat.require_user_info_text_en.trim()
                    }
                    

                    $('#divContainerChatBox .b-fptai-disconnect-livechat').remove();
                    if(!chatLog.loadHistory().length && !$('.b-input-text-name').length) {
                        $('#divContainerChatBox').append("<section class='b-input-text-name'><div class='mask-disconnect-livechat'></div><form action='' class='mask-input-text-name'><span style=''><div class='dv_fptai_icon_welcome_big'></div>" + require_user_info_display_text_1 + " <br/> <span style='font-size: 13px; font-style: italic;'>" + require_user_info_display_text_2 + "</span></span><input type='text' class='form-control' id='user-connecting-live-chat' /><br /><button type='submit' class='btn btn-primary'>Bắt đầu</button></form></section>");
                        $('#user-connecting-live-chat').focus();
                        $('form.mask-input-text-name').submit(function (e) {
                            e.preventDefault();
                           if($('#user-connecting-live-chat').val().trim() == '') {
                               return;
                           }
                           userNameChatLive = $('#user-connecting-live-chat').val();
                            $('#txtChatText').focus();
                            sendGetStartedMessage();
                            // 2019/08/09 LongTV - check bot send started message
                            localStorage.setItem('fptai_livechat_started_' + appCode, 'sended')

                            const scrollHeight = $('#divChatHistory')[0].scrollHeight;
							isFirstChating = true;
							setTimeout(function() {
								$('#divChatHistory')[0].scrollTop = 0;
								showHideAddressBar(true);
							}, 1000);
                            
                            // scrollToLatestMessage();
                        });
                    } else {
                        // 2019/08/09 LongTV - check bot send started message
                        let getSendStarted = localStorage.getItem('fptai_livechat_started_' + appCode);
                        if (getSendStarted && getSendStarted === 'sending') {
                            sendGetStartedMessage();
                            localStorage.setItem('fptai_livechat_started_' + appCode, 'sended')
                        }

                        if (intervalConnectLivechat) {
                            clearInterval(intervalConnectLivechat);
                        }
                    }
                };

                ws.onclose = function () {
                    //console.log("Closed connection to FPTAI WS");
                    if (!$('.b-fptai-disconnect-livechat').length) {
                        $('#divContainerChatBox').append("<div class='b-fptai-disconnect-livechat'><div class='mask-disconnect-livechat'></div></div>");
                        if (!isShowButtonConnect) {
                            $('.b-fptai-disconnect-livechat').append("<button class='btn btn-primary'>Reconnect</button>");
                            $('#txtChatText').blur();
                            if($('.b-input-text-name').length) {
                                $('.b-input-text-name').remove();
                            }
                        }
                    }
                    $('.b-fptai-disconnect-livechat button').click(function () {
                        isShowButtonConnect = true;
                        $('.b-fptai-disconnect-livechat button').remove();
                        $('.b-fptai-disconnect-livechat').append("<div class='livechat_loading'></div>");
                        intervalConnectLivechat = setInterval(function () {
                            ws = null;
                            _this.initWebSocket();
                        }, 5000);
                    });
                };

                ws.onmessage = function (e) {
                    let resp = $.parseJSON(e.data);
                    // fix msg accepted
                    if (resp.accepted) {
                        return false;
                    }

                    currentScroll += 1;
                    if(!persistentMenu.list && resp.type === 'persistent_menu') {
                        persistentMenu.list = resp.content;
                    } else if(resp.type !== 'persistent_menu' && resp.type !== 'typing'){
                        if (resp.source === 'user') {
                            hideAllQuickreplyButtonsGroup();
                            scrollTopUserLastMessage = $('#divChatHistory')[0].scrollHeight - 5;
                            isFirstChating = false;
                            currentScroll = 0;
                            // fix scroll to user message
                            activeScrollAction = false;
                            chatLog.appendUserChatLog(resp.content.text);
                            // const scrollHeight = $('#divChatHistory')[0].scrollHeight;
                            // console.log('scroll 1')
                            // console.log('scroll 2')
                            if (scrollTopUserLastMessage === 0) {
                                const scrollHeight = $('#divChatHistory')[0].scrollHeight;
                                $('#divChatHistory').scrollTop(scrollHeight)
                            }  else if (scrollTopUserLastMessage > 0) {
                                // console.log('scroll to user last message')
                                $('#divChatHistory')[0].scrollTop = scrollTopUserLastMessage
                            }
                            // fix scroll to user message
                            setTimeout(function () {
                                activeScrollAction = true;
                            }, 500);
                        } else {
                            let senderName = fptaiService.getSenderName();
                            resp.sender = 'bot';
                            resp.timestamp = new Date();
                            resp.sender_name = senderName;
    
                            $('#divChatHistory .block-pendding-message').remove();
                            // if(!chatLog.loadHistory().length) {
                            //     $('#divChatHistory').scrollTop(0)
                            //     showHideAddressBar();
                            // } else {
                            //
                            //     showHideAddressBar(true);
                            // }
    
                            activeScrollAction = false;
                            showHideAddressBar(false);
                            chatLog.appendChatLog(resp);
    
                            if (!isFirstChating) {
                                const scrollHeight = $('#divChatHistory')[0].scrollHeight;
                                // console.log('scroll 2')
                                if (scrollTopUserLastMessage === 0) {
                                    
                                    $('#divChatHistory').scrollTop(scrollHeight)
                                }  else if (scrollTopUserLastMessage > 0) {
                                    // console.log('scroll to user last message')
                                    $('#divChatHistory')[0].scrollTop = scrollTopUserLastMessage
                                }
                            }
                            setTimeout(function () {
                                activeScrollAction = true;
                            }, 500);
                            
                            
                            chatLog.renderSlideShow(true);
                            if(resp.type === 'typing') {
                                waitingResponsingMessage();
                                setTimeout(function () {
                                    $('#divChatHistory .cssBoxChatMsg_cont').removeClass('loader-live-chat');
                                }, HIDE_TYPING);
                            } else {
                                $('#divChatHistory .cssBoxChatMsg_cont').removeClass('loader-live-chat');
                            }
    
                        }

                        // $('#divChatHistory').scrollTop(currentScroll > 1 ?  (scrollHeight - 570) : (scrollHeight));
                    }
                };
            };

             this.initStylePersistentMenu = function(persistentMenu) {
                updateHeightMenu(persistentMenu);
                generateMenuItem(persistentMenu);
                bindActionClickItem();
                backToStep();
            }

            function updateHeightMenu() {
                $('#b-persistent-menu-live-chat__content').css({
                    top: -($('#b-persistent-menu-live-chat__content').height())
                });
            }

            function bindActionClickItem() {
                $('#b-persistent-menu-live-chat__content header i').hide();
                $('#b-persistent-menu-live-chat__content ul li').click(function (e) {
                    persistentMenu.currentItemId = $(this).data('id');
                    persistentMenu.currentItemTitle = $(this).data('title');
                    const message = $(this).find('span').text(),
                          dataType = $(this).data('type'), dataTitle = $(this).data('title'),
                          dataContent = $(this).data('content');
                    if(dataType === 'web_url' || dataType === 'payload') {
                        $('#b-persistent-menu-live-chat__content').hide();
                        if(dataType === 'payload') {
                            hideAllQuickreplyButtonsGroup();
                            scrollTopUserLastMessage = $('#divChatHistory')[0].scrollHeight - 5;
                            let senderName = fptaiService.getSenderName();
                            fptaiService.sendMessage({
                                'type': 'payload',
                                'content': dataContent,
                                'text': message,
                                'sender_name': senderName
                            });
                            // fix chatlog only receive from ws
                            // chatLog.appendUserChatLog(message);
                            $('.loading-message').remove();
                            waitingResponsingMessage();
                            setTimeout(function () {
                                $('.loading-message').remove();
                            }, 2000);
                        }
                    } else if(dataType === 'submenu') {
                        $('#b-persistent-menu-live-chat__content header strong').text(dataTitle);
                        $(this).remove();
                        if(persistentMenu.level === 1) {
                            for(let i = 0; i < persistentMenu.list.length; i++) {
                                if(persistentMenu.list[i].id === persistentMenu.currentItemId) {
                                    generateMenuItem(persistentMenu.list[i].content);
                                    persistentMenu.previousList = persistentMenu.list[i];
                                    break;
                                }
                            }
                            bindActionClickItem();
                            persistentMenu.level = 2;
                            $('#b-persistent-menu-live-chat__content header i').show();
                        } else if(persistentMenu.level === 2) {
                            for(let i = 0; i < persistentMenu.list.length; i++) {
                                if(persistentMenu.list[i].type === 'submenu') {
                                    for(let j = 0; j < persistentMenu.list[i].content.length; j++) {
                                        if(persistentMenu.list[i].content[j].id === persistentMenu.currentItemId) {
                                            generateMenuItem(persistentMenu.list[i].content[j].content);
                                            break;
                                        }
                                    }
                                }
                            }
                            bindActionClickItem();
                            persistentMenu.level = 3;
                            $('#b-persistent-menu-live-chat__content header i').show();
                        }
                    }
                });
            }

            function generateMenuItem(array) {
                 $('#b-persistent-menu-live-chat__content ul li').remove();
                 for(let i = 0; i < array.length; i++) {
                    let strItem = "<li data-content='"
                    strItem += ($.isArray(array[i].content) ? "" : array[i].content) + "##" + array[i].title
                    strItem += "' data-type='" + array[i].type + "' data-title='" + array[i].title + "' data-id='" + array[i].id + "' data-level='" + persistentMenu.level + "' data-is-sub-menu='" + ($.isArray(array[i].content) && array[i].content.length) + "' class='item-persistent-menu'>"
                    strItem += (array[i].type === 'web_url' ? "<a class='text-ellipsis' rel='noopener' target='_blank' href='" + array[i].content + "'>" + array[i].title + "</a>" : "<span class='menu-item-persistent-menu'>" + array[i].title + "</span>")
                    strItem += ($.isArray(array[i].content) && array[i].content.length ? "<i class='b-persistent-menu-live-chat__arrow-right'></i>" : "") + "</li>"
                    $('#b-persistent-menu-live-chat__content ul').append(strItem);
                    // $('#b-persistent-menu-live-chat__content ul').append(`
                    //     <li data-content="${$.isArray(array[i].content) ? '' : array[i].content}"
                    //         data-type="${array[i].type}" 
                    //         data-title="${array[i].title}"
                    //         data-id="${array[i].id}" 
                    //         data-level="${persistentMenu.level}"
                    //         data-is-sub-menu="${$.isArray(array[i].content) && array[i].content.length}"
                    //         class="item-persistent-menu">
                    //         ${array[i].type === 'web_url' ? 
                    //             `<a class="text-ellipsis" rel="noopener" target="_blank" href="${array[i].content}">${array[i].title}</a>` : 
                    //             ` <span class="menu-item-persistent-menu">${array[i].title}</span>`
                    //         }
                    //         ${$.isArray(array[i].content) && array[i].content.length ? '<i class="b-persistent-menu-live-chat__arrow-right"></i>' : '' }
                    //     </li>
                    // `)
                }
                 updateHeightMenu();
            }

            function backToStep() {
                $('#b-persistent-menu-live-chat__content header').click(function (e) {
                    e.preventDefault();
                    if(persistentMenu.level === 3) {
                        generateMenuItem(persistentMenu.previousList.content);
                        bindActionClickItem();
                        $('#b-persistent-menu-live-chat__content header i').show();
                        $('#b-persistent-menu-live-chat__content header strong').text(persistentMenu.previousList.title);
                        persistentMenu.level = 2;
                    } else if(persistentMenu.level === 2) {
                        generateMenuItem(persistentMenu.list);
                        bindActionClickItem();
                        persistentMenu.level = 1;
                        $('#b-persistent-menu-live-chat__content header strong').text('Menu');
                    } else if(persistentMenu.level === 1) {
                        persistentMenu.level = 1;
                    }
                });
            }

            this.getSenderName  = function() {
                const history = chatLog.loadHistory();
                let senderName = 'Customer';
                // if(!history.length) {
                //     senderName = userNameChatLive;
                // } else {
                //     for(let i = 0; i < history.length; i++) {
                //         if(history[i].sender_name) {
                //             senderName = history[i].sender_name;
                //             break;
                //         }
                //     }
                // }

                if (userNameChatLive !== '') {
                    senderName = userNameChatLive
                }

                if (history && history.length > 0) {
                    for(let i = 0; i < history.length; i++) {
                        if(history[i].sender_name) {
                            senderName = history[i].sender_name;
                            break;
                        }
                    }
                }
                return senderName;
            }

            function sendGetStartedMessage() {
                let senderName = fptaiService.getSenderName()
                _this.sendMessage({
                    'type': 'payload',
                    'content': 'get_started',
                    'text': '',
                    'sender_id': clientId,
                    'sender_name': senderName
                });
                $('.b-input-text-name').remove();
            }

            this.sendPostback = function (msg, msgText) {
                let senderName = fptaiService.getSenderName();
                this.sendMessage({
                    'type': 'payload',
                    'content': msg,
                    'text': msgText,
                    'sender_name': senderName
                })
            };

            this.sendMessage = function (msg) {
                ws.send(JSON.stringify(msg));
            };

            function MD5(d){result = M(V(Y(X(d),8*d.length)));return result.toLowerCase()};function M(d){for(var _,m="0123456789ABCDEF",f="",r=0;r<d.length;r++)_=d.charCodeAt(r),f+=m.charAt(_>>>4&15)+m.charAt(15&_);return f}function X(d){for(var _=Array(d.length>>2),m=0;m<_.length;m++)_[m]=0;for(m=0;m<8*d.length;m+=8)_[m>>5]|=(255&d.charCodeAt(m/8))<<m%32;return _}function V(d){for(var _="",m=0;m<32*d.length;m+=8)_+=String.fromCharCode(d[m>>5]>>>m%32&255);return _}function Y(d,_){d[_>>5]|=128<<_%32,d[14+(_+64>>>9<<4)]=_;for(var m=1732584193,f=-271733879,r=-1732584194,i=271733878,n=0;n<d.length;n+=16){var h=m,t=f,g=r,e=i;f=md5_ii(f=md5_ii(f=md5_ii(f=md5_ii(f=md5_hh(f=md5_hh(f=md5_hh(f=md5_hh(f=md5_gg(f=md5_gg(f=md5_gg(f=md5_gg(f=md5_ff(f=md5_ff(f=md5_ff(f=md5_ff(f,r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+0],7,-680876936),f,r,d[n+1],12,-389564586),m,f,d[n+2],17,606105819),i,m,d[n+3],22,-1044525330),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+4],7,-176418897),f,r,d[n+5],12,1200080426),m,f,d[n+6],17,-1473231341),i,m,d[n+7],22,-45705983),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+8],7,1770035416),f,r,d[n+9],12,-1958414417),m,f,d[n+10],17,-42063),i,m,d[n+11],22,-1990404162),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+12],7,1804603682),f,r,d[n+13],12,-40341101),m,f,d[n+14],17,-1502002290),i,m,d[n+15],22,1236535329),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+1],5,-165796510),f,r,d[n+6],9,-1069501632),m,f,d[n+11],14,643717713),i,m,d[n+0],20,-373897302),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+5],5,-701558691),f,r,d[n+10],9,38016083),m,f,d[n+15],14,-660478335),i,m,d[n+4],20,-405537848),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+9],5,568446438),f,r,d[n+14],9,-1019803690),m,f,d[n+3],14,-187363961),i,m,d[n+8],20,1163531501),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+13],5,-1444681467),f,r,d[n+2],9,-51403784),m,f,d[n+7],14,1735328473),i,m,d[n+12],20,-1926607734),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+5],4,-378558),f,r,d[n+8],11,-2022574463),m,f,d[n+11],16,1839030562),i,m,d[n+14],23,-35309556),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+1],4,-1530992060),f,r,d[n+4],11,1272893353),m,f,d[n+7],16,-155497632),i,m,d[n+10],23,-1094730640),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+13],4,681279174),f,r,d[n+0],11,-358537222),m,f,d[n+3],16,-722521979),i,m,d[n+6],23,76029189),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+9],4,-640364487),f,r,d[n+12],11,-421815835),m,f,d[n+15],16,530742520),i,m,d[n+2],23,-995338651),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+0],6,-198630844),f,r,d[n+7],10,1126891415),m,f,d[n+14],15,-1416354905),i,m,d[n+5],21,-57434055),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+12],6,1700485571),f,r,d[n+3],10,-1894986606),m,f,d[n+10],15,-1051523),i,m,d[n+1],21,-2054922799),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+8],6,1873313359),f,r,d[n+15],10,-30611744),m,f,d[n+6],15,-1560198380),i,m,d[n+13],21,1309151649),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+4],6,-145523070),f,r,d[n+11],10,-1120210379),m,f,d[n+2],15,718787259),i,m,d[n+9],21,-343485551),m=safe_add(m,h),f=safe_add(f,t),r=safe_add(r,g),i=safe_add(i,e)}return Array(m,f,r,i)}function md5_cmn(d,_,m,f,r,i){return safe_add(bit_rol(safe_add(safe_add(_,d),safe_add(f,i)),r),m)}function md5_ff(d,_,m,f,r,i,n){return md5_cmn(_&m|~_&f,d,_,r,i,n)}function md5_gg(d,_,m,f,r,i,n){return md5_cmn(_&f|m&~f,d,_,r,i,n)}function md5_hh(d,_,m,f,r,i,n){return md5_cmn(_^m^f,d,_,r,i,n)}function md5_ii(d,_,m,f,r,i,n){return md5_cmn(m^(_|~f),d,_,r,i,n)}function safe_add(d,_){var m=(65535&d)+(65535&_);return(d>>16)+(_>>16)+(m>>16)<<16|65535&m}function bit_rol(d,_){return d<<_|d>>>32-_}

            function guid() {
                return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
                    s4() + '-' + s4() + s4() + s4();
            }

            function s4() {
                return Math.floor((1 + Math.random()) * 0x10000)
                    .toString(16)
                    .substring(1);
            }
        }

        function Renderer(chatLogElement, baseUrl) {
            var currentSender = false;
            var chatLogEle = $(chatLogElement);

            function renderSeparator() {
                chatLogEle.append("<hr class='hrLineChat'>")
            }

            function createContainer(item) {
                // console.log(item);
                let container = '';
                const timeStamp = (new Date(item.timestamp));
                if (item.sender == 'bot') {
                    if (objLiveChat.icon_bot && objLiveChat.icon_bot !== '') {
                        if (item.type === 'text' || item.type === 'quick_reply') {
                            container = $(
                                '<div class="cssBoxMsgContainer has-bot-icon" data-sender="bot">' +
                                '<div class="cssBoxContainer">' +
                                '<div class="cssBoxChatName" style="float: left;padding: 0; position: relative; margin-right: 3px;">' +
                                '<img class="ssi-logo" src="' + objLiveChat.icon_bot + '">' +
                                '</div>' +
                                '<div class="cssBoxChatMsg_cont box-content"></div>' +
                                '</div>' +
                                '</div>')
                        } else {
                            container = $(
                                '<div class="cssBoxMsgContainer" data-sender="bot">' +
                                '<div class="cssBoxContainer">' +
                                // '<div class="cssBoxChatName" style="float: left;padding: 0 9px;">' +
                                // '<img class="ssi-logo" src="' + baseUrl + '/resource/logossi_m.jpg">' +
                                // '</div>' +
                                '<div class="cssBoxChatMsg_cont box-content" style="width: 100%;"></div>' +
                                '</div>' +
                                '</div>')
                        }
                        
                        
                    } else {
                        container = $(
                            '<div class="cssBoxMsgContainer" data-sender="bot">' +
                            '<div class="cssBoxContainer">' +
                            // '<div class="cssBoxChatName" style="float: left;padding: 0 9px;">' +
                            // '<img class="ssi-logo" src="' + baseUrl + '/resource/logossi_m.jpg">' +
                            // '</div>' +
                            '<div class="cssBoxChatMsg_cont box-content"></div>' +
                            '</div>' +
                            '</div>')
                    }
                    
                } else { // 'user'
                    container = $('<div id="user-message" class="cssBoxMsgContainer" data-sender="user" data-time="' + timeStamp + '">' +
                        // '<div class="cssBoxChatName">' +
                        // '<img width="27" height="27" src="' + baseUrl + '/resource/ic-avatar.svg">' +
                        // '</div>' +
                        '<div class="cssBoxChatMsg1 box-content"></div>' +
                        '</div>')
                }
                chatLogEle.append(container);
                return container
            }

            function checkStringIsUrl(str) {

                if (str) {
                    var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/
                    return regexp.test(str);
                }
            }

            function urlify(text) {
                if(checkStringIsUrl(text)) {
                    var urlRegex = /(https?:\/\/[^\s]+)/g;
                    return text.replace(urlRegex, function(url) {
                        return '<a rel="noopener" style="position: relative; display: block; width: 100%; word-break: break-all;" target="_blank" href="' + url + '">' + (url) + '</a>';
                    });
                } else {
                    return htmlEntities(text);
                }

            }

            /*
            {
                "text": "Bạn vui lòng cung cấp thông tin về đơn hàng",
                "buttons": [...]
            }
             */

            function htmlEntities(str) {
                return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
            }

            function renderTextMessage(container, content) {
                // console.log('content.text : ', content.text);
                if(content.text !== 'Typing') {
                    const splitText = content.text.replace(/\n/ig, '<br/>').split('<br/>');
                    let temp = '';
                    for(let i = 0; i < splitText.length; i++) {
                        if(!splitText[i].length) {
                            temp += '<br />';
                        } else {
                            temp += '<span style="display: block">' +  (urlify(splitText[i])) + '</span>';
                        }
                    }
                    container.find('.box-content').append('<p class="box-content-message no-box-shadow">' + temp + '</p>');
                    if (content.buttons) {
                        container.find('.box-content .box-content-message').addClass('message-has-button');
                        container.find('.box-content').append(createButtonGroup(content.buttons, ''));
                    }

                    }
                }

            /*
            {
                "title": "Image Title",
                "url":"http://link/to/image"
                "buttons": [...]
            }
            */
            function renderImageMessage(container, content) {
                let title = content.title.replace(/&/g, '&amp;')
                         .replace(/>/g, '&gt;')
                         .replace(/</g, '&lt;')
                         .replace(/\n/g, '<br>');
                // container.find('.box-content').append('<p>' + title + '</p>');
                container.find('.box-content').append('<p class="carousel-image image-message-rendering" title="' + title + '"><span>' + title + '</span><img class="cssBoxChatImg_cont" src="' + content.url + '" /></p>');
                // container.find('.box-content').append('<p class="image-background-size" style="background-image: url(' + content.url+ ')">' +'</p>');
                if (content.buttons) {
                    container.find('.box-content').append(createButtonGroup(content.buttons, ''));
                }
            }

            /*
            {
                "carousel_cards": [
                {
                    "title": "Bánh mỳ kẹp chả",
                    "subtitle": "Bánh mì chả lụa với cách làm đơn giản, không tốn nhiều thời gian của bạn để có món ăn sáng ngon, khởi đầu cho cho một ngày mới phấn khởi.",
                    "item_url": "",
                    "image_url": "http://www.banhmikep.com/wp-content/uploads/2016/12/banh-mi-kep-cha-lua.jpeg",
                    "buttons": [...]
                },
                {
                    "title": "Đùi gà chiên xù",
                    "subtitle": "Đùi gà chiên xốt xì dầu. 90 phút. đùi gà mềm, Ớt cay 1 quả (nếu thích cay), rượu trắng, đầy tinh bột ngô, muối , tiêu, Phần xốt.",
                    "item_url": "",
                    "image_url": "https://img-global.cpcdn.com/005_recipes/no9k6sonatqgkgihjia6/751x532cq70/photo.jpg",
                    "buttons": [...]
                }
                ]
            }
            */
            function renderCarouselMessage(container, item) {
                slideIndex = 0;
                let carousel = $('<div id="' + item.carouselId + '" class="carousel-box">' +
                    '<div class="content"></div></div>');

                let content = carousel.find('.content');
                let cards = item.content.carousel_cards;
                let navButton = cards.length > 1 ? '<div class="nav-button"><button class="prev"> </button><button class="next"> </button></div>' : '';
                cards.forEach(function (card, index) {
                    let cardEle = $('<div class="item"></div>');
                    let subTitle = card.subtitle.replace(/&/g, '&amp;')
                         .replace(/>/g, '&gt;')
                         .replace(/</g, '&lt;')
                         .replace(/\n/g, '<br>');
                    let image = "<p><img data-index='" + index + "' data-carousel='" + item.carouselId + "' class='cssBoxChatImg_cont img-fluid' src='" + card.image_url + "' /></p>";
                    cardEle.append("<div class='carousel-image'>" + navButton + image + "</div>");
                    cardEle.append('<p style="margin-top: 10px"><strong>' + card.title + '</strong></p>');
                    cardEle.append('<p>' + subTitle + '</p>');
                    if (card.buttons) {
                        cardEle.append(createButtonGroup(card.buttons, ''));
                    }
                    if (index == 0) {
                        cardEle.addClass("current");
                    }
                    content.append(cardEle);
                });

                carousel.find('.next').on('click', function () {
                    let currentItem = $(this).parents('.current');
                    if (currentItem.next().length > 0) {
                        currentItem.removeClass('current');
                        let nextItem = currentItem.next();
                        updateCarouselHeight(nextItem);
                        nextItem.addClass('current');
                        $('.carousel-box .nav-button .next').css('backgroundColor', '#ffffff');
                        $('.carousel-box .nav-button .prev').css('backgroundColor', '#ffffff');
                    } else {
                        $('.carousel-box .nav-button .next').css('backgroundColor', '#83888c');
                    }

                });

                carousel.find('.prev').on('click', function () {
                    let currentItem = $(this).parents('.current');
                    if (currentItem.prev().length > 0) {
                        currentItem.removeClass('current');
                        let prevItem = currentItem.prev();
                        updateCarouselHeight(prevItem);
                        prevItem.addClass('current');
                        $('.carousel-box .nav-button .prev').css('backgroundColor', '#ffffff');
                        $('.carousel-box .nav-button .next').css('backgroundColor', '#ffffff');
                    } else {
                        $('.carousel-box .nav-button .prev').css('backgroundColor', '#83888c');
                    }
                });

                container.find('.box-content').append(carousel).css('width', '100%');
                let currentEle = carousel.find('.item.current');
                updateCarouselHeight(currentEle);
                currentEle.find('img').on('load', function () {
                    updateCarouselHeight(currentEle);
                });

                $('#reconnect-livechat .modal-dialog, #reconnect-livechat .modal-body').css({
                    height: ($(window).height() - 60)
                });

                $('.my-slides img').css({
                    maxHeight: ($(window).height() - 60)
                });

            }
			
			function renderCarouselMessageNewStyleSlide(container, item) {
				let carousel = $('<div id="' + item.carouselId + '" class="livechat-fptai-slider-container">' +
                    '<div class="slider-content"></div></div>');
				let content = carousel.find('.slider-content');
				let cards = item.content.carousel_cards;
				let navButton = cards.length > 1 ? '<a class="slider-left" href="javascript:void(0);"><i class="fa fa-arrow-left"></i></a><a class="slider-right" href="javascript:void(0);"><i class="fa fa-arrow-right"></i></a>' : '';
				cards.forEach(function (card, index) {
					let cardEle = $('<div class="slider-single"></div>');
					let subTitle = card.subtitle.replace(/&/g, '&amp;')
                         .replace(/>/g, '&gt;')
                         .replace(/</g, '&lt;')
                         .replace(/\n/g, '<br>');
					// image carousel
					let image = "<img data-index='" + index + "' data-carousel='" + item.carouselId + "' class='slider-single-image' src='" + card.image_url + "' alt='" + (index + 1) + "' />";
					cardEle.append(image);
					// carousel information
					let carouselInformation = $('<div class="slider-single-title"></div>');
					// carousel title
					carouselInformation.append('<h3>' + card.title + '</h3>');
					// carousel subtitle
					if (subTitle !== '') {
						carouselInformation.append('<p>' + subTitle + '</p>');
					}
					if (card.buttons) {
                        carouselInformation.append(createNewCarouselButtonGroup(card.buttons, ''));
                    }
					cardEle.append(carouselInformation);
					content.append(cardEle);
					
					 
				});
				
				// add navigator
				carousel.append(navButton);
				
				container.find('.box-content').append(carousel).css('width', '100%');
				
				// set event
				var slide = container.find('.slider-single');
				var slideTotal = slide.length - 1;
				var slideCurrent = -1;

				function slideInitial() {
					slide.addClass('proactivede');
					setTimeout(function() {
						slideRight();
					}, 500);
				}

				function slideRight() {
					if (slideCurrent < slideTotal) {
						slideCurrent++;
					} else {
						slideCurrent = 0;
					}

					if (slideCurrent > 0) {
						var preactiveSlide = slide.eq(slideCurrent - 1);
					} else {
						var preactiveSlide = slide.eq(slideTotal);
					}
					var activeSlide = slide.eq(slideCurrent);
					if (slideCurrent < slideTotal) {
						var proactiveSlide = slide.eq(slideCurrent + 1);
					} else {
						var proactiveSlide = slide.eq(0);

					}

					slide.each(function() {
						var thisSlide = $(this);
						if (thisSlide.hasClass('preactivede')) {
							thisSlide.removeClass('preactivede preactive active proactive').addClass('proactivede');
						}
						if (thisSlide.hasClass('preactive')) {
							thisSlide.removeClass('preactive active proactive proactivede').addClass('preactivede');
						}
					});
					preactiveSlide.removeClass('preactivede active proactive proactivede').addClass('preactive');
					activeSlide.removeClass('preactivede preactive proactive proactivede').addClass('active');
					proactiveSlide.removeClass('preactivede preactive active proactivede').addClass('proactive');
				}

				function slideLeft() {
					if (slideCurrent > 0) {
						slideCurrent--;
					} else {
						slideCurrent = slideTotal;
					}

					if (slideCurrent < slideTotal) {
						var proactiveSlide = slide.eq(slideCurrent + 1);
					} else {
						var proactiveSlide = slide.eq(0);
					}
					var activeSlide = slide.eq(slideCurrent);
					if (slideCurrent > 0) {
						var preactiveSlide = slide.eq(slideCurrent - 1);
					} else {
						var preactiveSlide = slide.eq(slideTotal);
					}
					slide.each(function() {
						var thisSlide = $(this);
						if (thisSlide.hasClass('proactivede')) {
							thisSlide.removeClass('preactive active proactive proactivede').addClass('preactivede');
						}
						if (thisSlide.hasClass('proactive')) {
							thisSlide.removeClass('preactivede preactive active proactive').addClass('proactivede');
						}
					});
					preactiveSlide.removeClass('preactivede active proactive proactivede').addClass('preactive');
					activeSlide.removeClass('preactivede preactive proactive proactivede').addClass('active');
					proactiveSlide.removeClass('preactivede preactive active proactivede').addClass('proactive');
				}
				var left = container.find('.slider-left');
				var right = container.find('.slider-right');
				left.on('click', function() {
					slideLeft();
				});
				right.on('click', function() {
					slideRight();
				});
				var touchStart = 0;
				var touchEnd = 0;
				slide.each(function() {
					// console.log($(this))
					try {
						let imgs = $(this).find('.slider-single-image')
						if (imgs && imgs.length > 0) {
							imgs.forEach(function (i) {
								$(i).on( "touchstart", function(event) {
									touchStart = event.touches[0].clientX;
								});
								$(i).on("touchend", function(event) {
									if (event.touches && event.touches.length > 0) {
										touchEnd = event.touches[0].clientX;
									} else if (event.changedTouches && event.changedTouches.length > 0) {
										touchEnd = event.changedTouches[0].clientX;
									}
									if (touchEnd - touchStart > 30) {
										slideLeft();
									} else if (touchEnd - touchStart < -30) {
										slideRight();
									}
								});
							});
							
						}
					} catch (e) {
					}
					
				});
				slideInitial();
				setTimeout(function () {
					try {
						// resize box display carousel
						let actHeight = carousel[0].offsetHeight;
						let maxChildrenHeight = 0;
						for (let i = 0; i < slide.length; i++) {
							maxChildrenHeight = maxChildrenHeight > slide[i].offsetHeight ? maxChildrenHeight : slide[i].offsetHeight;
                        }
                        if (maxChildrenHeight > actHeight) {
                            let addPadding = maxChildrenHeight - actHeight + 35;
                            carousel[0].style.paddingBottom = addPadding + 'px';
                            if (!isFirstChating) {
                                let boxChat = $("#divChatHistory")[0];
                                if (scrollTopUserLastMessage > 0) {
                                    boxChat.scrollTop = scrollTopUserLastMessage;
                                } else {
                                    boxChat.scrollTop = boxChat.scrollHeight;
                                }
							    
                            }
							
                        } else if (maxChildrenHeight + 20 > actHeight) {
                            let addPadding = maxChildrenHeight - actHeight + 20;
                            carousel[0].style.paddingBottom = addPadding + 'px';
                            if (!isFirstChating) {
                                let boxChat = $("#divChatHistory")[0];
							    if (scrollTopUserLastMessage > 0) {
                                    boxChat.scrollTop = scrollTopUserLastMessage;
                                } else {
                                    boxChat.scrollTop = boxChat.scrollHeight;
                                }
                            }
							
						}
					} catch (e) {
						
					}
					
				}, 500);
				
				
			}

            /*
                "buttons": [...],
                "text": "Text description"
            */
            function renderQuickReplayMessage(container, content) {
                const splitText = content.text.replace(/\n/ig, '<br/>').split('<br/>');
                let temp = '';
                for(let i = 0; i < splitText.length; i++) {
                    if(!splitText[i].length) {
                        temp += '<br />';
                    } else {
                        temp += '<span style="display: block">' +  (urlify(splitText[i])) + '</span>';
                    }
                }
                container.find('.box-content').append('<p class="box-content-message">' + temp + '</p>');
                if (content.buttons) {
                    container.find('.box-content .box-content-message');
                    container.append(createButtonGroup(content.buttons, 'custom-quick-replay')).addClass('message-quick-replay');
                }
            }

            /*
            {
                "title": "Đặt hàng",
                "payload": "32d5b674231fb85f9f61ed924c86a843" #scenario_code
                "url": "http://abc.def", #optional
                "webview_height_ratio": "full" #optional
            }
            */
            function createButtonGroup(buttons, isCustomClass) {
                let customClass = isCustomClass ? isCustomClass : '';
                let group = $('<div class="button-group"></div>')
                buttons.forEach(function (button, index) {
                    var buttonEle = null;
                    if (index === buttons.length - 1) {
                        buttonEle = $('<button class="btnQuesStyle last-button ' + customClass + '">' + button.title + '</button>');
                    } else {
                        buttonEle = $('<button class="btnQuesStyle ' + customClass + '">' + button.title + '</button>');
                    }
                     
                    if (button.url) {
                        if(button.url === 'http://upload-image-cmt') {
                            buttonEle = $('<p class="demo-upload">Upload image</p><input type="file" class="btnQuesStyle input-file-information" id="input-file-information" name="file">');
                        } else {
                             buttonEle.data('url', encodeURIComponent(button.url));
                        }
                    } else if (button.payload) {
                        buttonEle.val(button.payload + "#" + button.title);
                    } else if(button.phone_call) {
                        let cssLastButton = index === buttons.length - 1 ? 'last-button' : ''
                        buttonEle = $('<button class="btnQuesStylePhoneCall ' + cssLastButton + '" onclick="window.location=\'tel:' + button.phone_call +'\';" style="white-space: inherit"><i class="iconfptai-phone-forward" style="color: #5DC7D0; position: relative; top: -3px; padding-right: 4px;"></i><strong>' + button.title + '</strong></button>');
                    }

                    group.append(buttonEle);
                });
                group.find('.input-file-information').on('change', function(event) {
                    event.stopPropagation();
                    event.preventDefault();
                   const fileTarget = event.target.files[0];
                   let formData = new FormData();
                    formData.append('image', fileTarget);
                    var reader  = new FileReader();
                    let isLoaded = false;
                    reader.onload = function () {
                        if(!isLoaded) {
                            isLoaded = true;
                            const item = { sender: 'user' };
                            let container = createContainer(item);
                            container.find('.box-content').append('<p class="box-content-message"><img src="' + reader.result + '" style="width: 100%; height: 100%"/></p>');
                            waitingResponsingMessage();
                            setTimeout(function () {
                                $('.loading-message').remove();
                            }, 2000);
                        }
                    };
                    if (fileTarget) {
                        reader.readAsDataURL(fileTarget);
                        scrollToLatestMessage();
                    }

                   $.ajax({
                      type: "POST",
                      url: 'https://api.openfpt.vn/cmt/',
                      data: formData,
                      processData: false, // Don't process the files
                      contentType: false,
                      success: function (data) {
                        const item = { sender: 'bot' };
                        let container = createContainer(item);
                        $('#divChatHistory .block-pendding-message').remove();
                        container.find('.box-content').append("<div class='box-content-message'><p>Chúng tôi xin xác nhận lại thông tin của bạn:</p><p>Họ tên : " + data.name + "</p><p>Ngày sinh : " + data.dob + "</p><p>Số CMND: " + data.id + "</p><p>Địa chỉ : " + data.address + "</p></div>");
                        scrollToLatestMessage();
                      }
                    });
                });
                group.find('button.btnQuesStyle').on('click', function (e) {
                    hideAllQuickreplyButtonsGroup();
                    scrollTopUserLastMessage = $('#divChatHistory')[0].scrollHeight - 5;
                    isFirstChating = false;
                    e.preventDefault();
                    if ($(this).data('url')) {
                        window.open(decodeURIComponent($(this).data('url')), '_blank');
                    } else {
                        fptaiService.sendPostback($(this).val(), $(this).text());
                        // chatLog.appendUserChatLog($(this).html());
                    }

                    $('#txtChatText').blur();
                });
                // group.find('button.btnQuesStyle.custom-quick-replay').on('click', function (e) {
                //     isFirstChating = false;
                //     let btnGroupHeight = $(this).parent()[0].offsetHeight
                //     scrollTopUserLastMessage = scrollTopUserLastMessage - btnGroupHeight - 10;
                //     e.preventDefault();
                //     $(this).parent().css('display', 'none');
                // });
                return group
            }
			
			function createNewCarouselButtonGroup(buttons, isCustomClass) {
                let customClass = isCustomClass ? isCustomClass : '';
                let group = $('<div class="button-group"></div>')
                buttons.forEach(function (button, index) {
					if (index != 0) {
						group.append('<hr style="margin: 0; background-color: #e3e3e3; height: 1px; border: 0;">');
					}
                    var buttonEle = $('<button class="btnQuesStyleNew ' + customClass + '">' + button.title + '</button>');
                    if (button.url) {
                        if(button.url === 'http://upload-image-cmt') {
                            buttonEle = $('<p class="demo-upload">Upload image</p><input type="file" class="btnQuesStyleNew input-file-information" id="input-file-information" name="file">');
                        } else {
                             buttonEle.data('url', encodeURIComponent(button.url));
                        }
                    } else if (button.payload) {
                        buttonEle.val(button.payload + "#" + button.title);
                    } else if(button.phone_call) {
                        buttonEle = $('<button class="btnQuesStyleNewPhoneCall" onclick="window.location=\'tel:' + button.phone_call + '\';" style="white-space: inherit"><i class="iconfptai-phone-forward" style="color: #5DC7D0; position: relative; top: -3px; padding-right: 4px;"></i><strong>' + button.title + '</strong></button>');
                    }

                    group.append(buttonEle);
                });
                group.find('.input-file-information').on('change', function(event) {
                    event.stopPropagation();
                    event.preventDefault();
                   const fileTarget = event.target.files[0];
                   let formData = new FormData();
                    formData.append('image', fileTarget);
                    var reader  = new FileReader();
                    let isLoaded = false;
                    reader.onload = function () {
                        if(!isLoaded) {
                            isLoaded = true;
                            const item = { sender: 'user' };
                            let container = createContainer(item);
                            container.find('.box-content').append('<p class="box-content-message"><img src="' + reader.result + '" style="width: 100%; height: 100%"/></p>');
                            waitingResponsingMessage();
                            setTimeout(function () {
                                $('.loading-message').remove();
                            }, 2000);
                        }
                    };
                    if (fileTarget) {
                        reader.readAsDataURL(fileTarget);
                        scrollToLatestMessage();
                    }

                   $.ajax({
                      type: "POST",
                      url: 'https://api.openfpt.vn/cmt/',
                      data: formData,
                      processData: false, // Don't process the files
                      contentType: false,
                      success: function (data) {
                        const item = { sender: 'bot' };
                        let container = createContainer(item);
                        $('#divChatHistory .block-pendding-message').remove();
                        // container.find('.box-content').append(`
                        // <div class="box-content-message">
                        //     <p>Chúng tôi xin xác nhận lại thông tin của bạn:</p>
                        //    <p>Họ tên : ${data.name}</p>
                        //    <p>Ngày sinh : ${data.dob}</p>
                        //    <p>Số CMND: ${data.id}</p>
                        //    <p>Địa chỉ : ${data.address}</p>
                        // </div>`);
                        container.find('.box-content').append("<div class='box-content-message'><p>Chúng tôi xin xác nhận lại thông tin của bạn:</p><p>Họ tên : " + data.name + "</p><p>Ngày sinh : " + data.dob + "</p><p>Số CMND: " + data.id + "</p><p>Địa chỉ : " + data.address + "</p></div>");
                        scrollToLatestMessage();
                      }
                    });
                });
                group.find('button.btnQuesStyleNew').on('click', function (e) {
                    hideAllQuickreplyButtonsGroup()
                    scrollTopUserLastMessage = $('#divChatHistory')[0].scrollHeight - 5;
                    // console.log(e)
                    // let thisEle = e.srcElement || e.target;
                    // let checkParent = thisEle.parentNode.parentNode.parentNode;
                    // console.log(checkParent.classList);
                    // if (checkParent.classList.indexOf('active'))
                    isFirstChating = false;
                    e.preventDefault();
                    if ($(this).data('url')) {
                        window.open(decodeURIComponent($(this).data('url')), '_blank');
                    } else {
                        fptaiService.sendPostback($(this).val(), $(this).text());
                        // chatLog.appendUserChatLog($(this).html());
                    }

                    $('#txtChatText').blur();
                });
                group.find('button.btnQuesStyleNew.custom-quick-replay').on('click', function (e) {
                    isFirstChating = false;
                    e.preventDefault();
                    $(this).parent().css('display', 'none');
                });
                return group
            }

            this.renderMessage = function (item) {
                let container = createContainer(item);
                currentSender = item.sender;
                switch (item.type) {
                    case 'text':
                        renderTextMessage(container, item.content);
                        break;
                    case 'image':
                        renderImageMessage(container, item.content);
                        break;
                    case 'carousel':
                        // renderCarouselMessage(container, item);
						renderCarouselMessageNewStyleSlide(container, item);
                        break;
                    case 'quick_reply':
                        renderQuickReplayMessage(container, item.content);
                        break;
                }
                //scrollToLatestMessage();
                // console.log(scrollTopUserLastMessage)
				
				if (isFirstChating) {
					showHideAddressBar(true);
					setTimeout(function() {	
						$('#divChatHistory')[0].scrollTop = 0;
					}, 1000);
					
				}
            }
        }

        function ChatLog(appCode) {
            let historyChat, slideIndex = 0;
            this.renderPreviousChat = function () {
                historyChat = this.loadHistory();
                historyChat.forEach(function (item, index) {
                    // if message dont have type -> pass
                    if (item.type) {
                        if(item.type === 'carousel') {
                            item.carouselId = 'carousel-' + index;
                        }
                        if (item.type === 'quick_reply') {
                            if (item.content.buttons) {
                                delete item.content.buttons
                            }
                        }
                        renderer.renderMessage(item);
                    }
                });
            };

            const renderSlideShowCarousel = function()  {
                // cancel action click to image
                return false;


                $('.carousel-box .cssBoxChatImg_cont').click(function () {
                    if ($('.dm-overlay-slide').length) {
                        $('.dm-overlay-slide').remove();
                    }
                    slideIndex = $(this).data('index');
                    let carouselSelected = $(this).parents('.carousel-box').attr('id');
                    $('#btn-next, #btn-previous').attr('id-carousel', carouselSelected);
                    showSlides(slideIndex, carouselSelected);
                    $('#reconnect-livechat').addClass('show').show().css('display', 'flex');
                    $('#reconnect-livechat .modal-dialog').addClass('d-flex');
                    $('body').append('<div class="dm-overlay-slide"></div>');
                    if($('#' + carouselSelected).find('img').length > 1) {
                         $('#btn-previous, #btn-next').show();
                    } else {
                        $('#btn-previous, #btn-next').hide();
                    }
                });

                $('.image-message-rendering img').click(function () {
                    let bodyModal = $('#reconnect-livechat .modal-body');
                    bodyModal.find('img').remove();
                    bodyModal.append("<img class='img-fluid' src='" + $(this).attr('src') + "' />");
                    $('#reconnect-livechat').addClass('show').show().css('display', 'flex');
                    $('#reconnect-livechat .modal-dialog').addClass('d-flex');
                    $('body').append('<div class="dm-overlay-slide"></div>');
                    $('#btn-previous, #btn-next').hide();
                });

            };

            const hideModalSlideshow = function() {
                $('#reconnect-livechat').removeClass('show').hide();
                $('body .dm-overlay-slide').remove();
                $('#reconnect-livechat .modal-dialog').removeClass('d-flex');
                isSelectedSlide = false;
            };

            const getImageToShow = function (currentIndex, carouselSelected) {
                let countImage = $('#' + carouselSelected).find('img');
                let imageIndex = $(countImage[currentIndex]).data('index');
                let imageUrl = $(countImage[currentIndex]).attr('src');
                let image = '<img data-index="' + imageIndex + '" class="img-fluid" src="' + imageUrl + '" />';
                return image;
            };

            const showSlides = function(currentIndex, carouselSelected) {
                slideIndex = currentIndex;
                $('#btn-previous, #btn-next').css('backgroundColor', '#ffffff');
                if(currentIndex == 0) {
                    $('#btn-previous').css('backgroundColor', '#83888c');
                } else if(currentIndex == ($('#' + carouselSelected).find('img').length - 1)) {
                    $('#btn-next').css('backgroundColor', '#83888c');
                } else {
                    $('#btn-previous, #btn-next').css('backgroundColor', '#ffffff');
                }

                let bodyModal = $('#reconnect-livechat .modal-body');
                bodyModal.find('img').remove();
                bodyModal.append(getImageToShow(currentIndex, carouselSelected));
            };

            const bindActionsSlideshow = function () {
                $('#reconnect-livechat #btn-previous').click(function () {
                    if (slideIndex > 0) {
                        showSlides(slideIndex -= 1, $(this).attr('id-carousel'));
                    }
                });

                $('#reconnect-livechat #btn-next').click(function () {
                    if (slideIndex < $('#' + $(this).attr('id-carousel')).find('img').length - 1) {
                        showSlides(slideIndex += 1, $(this).attr('id-carousel'));
                    }
                });

                $('#reconnect-livechat .btn-close-modal').click(function () {
                    hideModalSlideshow();
                });

                $('#reconnect-livechat').click(function (e) {
                    if (e.target.id != 'btn-next' && e.target.id != 'btn-previous') {
                        hideModalSlideshow();
                    }
                });
            }

            bindActionsSlideshow();

            this.renderSlideShow = function () {
                renderSlideShowCarousel();
            };

            this.appendUserChatLog = function (msg) {
                let userName = fptaiService.getSenderName();
                this.appendChatLog({
                    'sender': 'user',
                    'sender_name': userName,
                    'type': 'text',
                    'content': {'text': msg},
                    'timestamp': new Date()
                });
            };

            this.appendChatLog = function (item) {
                if(item.type === 'carousel') {
                    item.carouselId = 'carousel-' + (historyChat.length) ? historyChat.length : '0';
                }
                renderer.renderMessage(item);
                saveHistory(item);
            };

            const saveHistory = function (item) {
                if (historyChat.length > 100) {
                    historyChat.shift();
                }
                historyChat.push(item);
                localStorage.setItem('fptai_livechat_' + appCode, JSON.stringify(historyChat));
            };

            this.loadHistory = function () {
                let history = localStorage.getItem('fptai_livechat_' + appCode);
                let parserHistory = JSON.parse(history);
                return history ? parserHistory : [];
            };

        }

        function VoiceService(voice, speed) {
            this.audioContext = false;
            this.bufferSource = false;
            let bufferSourceTest, audioContextTest;
            this.voiceService = (voice == undefined) ? "hatieumai" : voice; // 'male', 'female', 'hatieumai'
            // let iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
            let iOS = navigator.userAgent.match(/iPhone/i) || (!!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform));
            this.speed = (speed == undefined) ? 0 : speed; // -3, -2, -1, 0, 1, 2, 3
            if (typeof voice_live_chat == "undefined") {
                voice_live_chat = false;
            }

            if (typeof voice_live_chat_voice == "undefined") {
                voice_live_chat_voice = "female";
            }

            if (typeof voice_live_chat_speed == "undefined") {
                voice_live_chat_speed = 0;
            }

            let _this = this;
            function speak_ios(text) {
                if (!_this.audioContext) {
                    return;
                }
                stopSpeak_ios();
                let audioRequest = new XMLHttpRequest();
                audioRequest.open("POST", "https://asr2.openfpt.vn/tts/", true);
                audioRequest.setRequestHeader("speed", voice_live_chat_speed);
                audioRequest.setRequestHeader("voice", voice_live_chat_voice);
                audioRequest.setRequestHeader("prosody", "1");
                audioRequest.setRequestHeader("format", "mp3");

                audioRequest.responseType = "arraybuffer";
                audioRequest.onload = function () {
                    _this.audioContext.decodeAudioData(audioRequest.response,
                        function (buffer) {
                            _this.bufferSource = _this.audioContext.createBufferSource();
                            _this.bufferSource.buffer = buffer;
                            _this.bufferSource.connect(_this.audioContext.destination);
                            _this.bufferSource.start(0);
                        });
                };
                audioRequest.send(text);
            }

            function stopSpeak_ios() {
                if (this.audioContext && this.bufferSource) {
                    this.bufferSource.disconnect();
                }
            }

            this.speak = function (text) {
                if (iOS) {
                    speak_ios(text);
                    return
                }
                $.ajax({
                    url: "https://asr2.openfpt.vn/tts/callback",
                    type: "POST",
                    headers: {
                        "speed": voice_live_chat_speed,
                        "voice": voice_live_chat_voice,
                        "prosody": "1",
                        "format": "mp3"
                    },
                    data: text,
                    success: function(resp) {
                        //console.log(resp);
                        $('#tts-player').attr("src", resp.url);
                        $('#tts-player')[0].play();
                    }
                });
            };

            this.stopSpeak = function () {
                if (iOS) {
                    stopSpeak_ios();
                    return;
                }
                $('#tts-player')[0].pause();
                if (this.audioContext && this.bufferSource) {
                    this.bufferSource.disconnect();
                }
            };

            this.initVoice = function () {
                // $('<button>Record</button>').attr("id", "rec-btn").insertBefore('#txtChatText');
                // $('.cssChatText').css('width', '210px');
                $('.b-live-chat-microphone-cover').css('display', 'inline-block');
                $('<audio></audio>').attr("id", "tts-player").insertBefore('#start-recordering');
                $('.cssChatText').css({
                    'margin': '15px 5px 0 -37px',
                    'width': 'calc(100% - 145px)'
                });
                let $level = $('.recorder'), levelList = [10,17,8,19,20,15], currentIndex = 0, intervalRecordering = null;
                $level.addClass('no-border-radius');

                function updateLevel() {
                    let level = getLevel();
                    $level.removeClass('no-border-radius').css('height', level + 'px');
                }

                function getLevel() {
                    var level = levelList[currentIndex];
                    if (typeof level === 'undefined') {
                        currentIndex = 0;
                        level = getLevel();
                    } else {
                        currentIndex++;
                    }
                    return level;
                }


                const SILENT_THRESHOLD = 1000;
                const SILENT_DURATION = 2;

                let isStop = true, recorder, ws, buffer, result, countSilentDuration = 0;

                var _this = this;
                $("#start-recordering").click(function () {
                    _this.stopSpeak();
                    $(this).removeAttr('id').attr('id', 'stop-recordering');

                    if (!isStop) {
                        closeWS();
                        // stop();
                        return;
                    }

                    if (!_this.audioContext) {
                        _this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
                        audioContext = _this.audioContext;
                        if (audioContext.state == 'suspended') {
                            audioContext.resume();
                        }
                        navigator.mediaDevices.getUserMedia({audio: true}).then(function (stream) {
                            var audioInput = audioContext.createMediaStreamSource(stream);
                            var bufferSize = 0;

                            recorder = audioContext.createScriptProcessor(bufferSize, 1, 1);

                            recorder.onaudioprocess = function (e) {
                                if (!isStop && ws && ws.readyState == ws.OPEN) {
                                    if (countSilentDuration > SILENT_DURATION) {
                                        closeWS();
                                        // stop();
                                        countSilentDuration = 0;
                                        return;
                                    }

                                    buffer = e.inputBuffer.getChannelData(0);
                                    var int16ArrayData = convertFloat32ToInt16(buffer);
                                    countSilentDuration += int16ArrayData.length / audioContext.sampleRate;
                                    for (var i = 0; i < int16ArrayData.length; i++) {
                                        if (Math.abs(int16ArrayData[i]) > SILENT_THRESHOLD) {
                                            countSilentDuration = 0;
                                            break;
                                        }
                                    }
                                    ws.send(int16ArrayData.buffer);
                                }
                            };
                            audioInput.connect(recorder);
                            recorder.connect(audioContext.destination);
                        }).catch(function (e) {

                        });
                    }

                    //$(this).html('Stop');
                    isStop = false;
                    result = '';
                    ws = new WebSocket("wss://asr2.openfpt.vn/ws?content-type=audio/x-raw,+layout=(string)interleaved,+rate=(int)" + audioContext.sampleRate + ",+format=(string)S16LE,+channels=(int)1");

                    ws.onopen = function () {
                        //console.log("Opened connection to websocket");
                        intervalRecordering = setInterval(updateLevel, 100);
                    };

                    ws.onclose = function () {
                        //console.log("Websocket closed");
                        stop();
                    };

                    ws.onmessage = function (e) {
                        var resp = $.parseJSON(e.data);

                        if (resp.status == 0 && resp.result && resp.result.hypotheses.length > 0) {
                            var text = resp.result.hypotheses[0].transcript;
                            if (text == '<unk>.') {
                                return;
                            }
                            if (resp.result.final) {
                                result += text + " ";
                                //$('#txtChatText').val(isStop ? result.replace('.', '') : result.replace('.', '') + text);
                                let senderName = fptaiService.getSenderName();
                                fptaiService.sendMessage({
                                    'type': 'text',
                                    'content': result.replace('.', ''),
                                    'sender_name': senderName
                                });
                                chatLog.appendUserChatLog(result.replace('.', ''));

                                $('#btnSendMsgChat').removeClass('has-message').addClass('no-message');
                                $('.loading-message').remove();
                                //$('#txtChatText').val('');
                                $('#divChatHistory').append('<div class="cssBoxMsgContainer block-pendding-message loading-message"><div class="cssBoxContainer"><div class="cssBoxChatMsg_cont box-content loader-live-chat"><span class="dot"></span><span class="dot"></span><span class="dot"></span></div></div></div>');
                                scrollToLatestMessage();
                                return;
                            }
                            //;


                        }
                    };
                });


                function fillLogChat(userName, msg, timeSend, saveData) {
                if (userName == "Bot") {
                    voiceService.speak(msg);
                }
                var anotherFrame = false;
                // if (chatLog && chatLog.length > 0) {
                //     if (chatLog[chatLog.length - 1].u === userName) {
                //         anotherFrame = false;
                //     } else {
                //         anotherFrame = true;
                //
                //         var hrLine = document.createElement("hr");
                //         hrLine.className = "hrLineChat";
                //         document.getElementById("divChatHistory").appendChild(hrLine);
                //     }
                // } else {
                //     anotherFrame = true;
                // }

                var objChatChit = {
                    u: userName,
                    msg: msg,
                    time: timeSend
                }

                // logChat.push(objChatChit)
                chatLog.saveHistory(objChatChit);

                // createSingerLogChat(objChatChit, anotherFrame);


            };

            function sendMsgToBot(strChat) {
            };

                function stop() {
                    isStop = true;
                    sendMsgToBot(result);
                    clearInterval(intervalRecordering);
                    $level.addClass('no-border-radius').css('height', 11);
                    $('#txtChatText').val('');
                }

                function closeWS() {
                    clearInterval(intervalRecordering);
                    currentIndex = 2;
                    if (ws && ws.readyState == ws.OPEN) {
                        ws.send("EOS");
                    }
                }

                function convertFloat32ToInt16(float32ArrayData) {
                    var l = float32ArrayData.length;
                    var int16ArrayData = new Int16Array(l);
                    while (l--) {
                        int16ArrayData[l] = Math.min(1, float32ArrayData[l]) * 0x7FFF;
                    }
                    return int16ArrayData;
                }
            }
        }

        function hideAllQuickreplyButtonsGroup() {
            let heightBeforeCleanButtons = $('#divChatHistory').scrollTop()
            let listButtonGroups = $('#divChatHistory').find('button.btnQuesStyle.custom-quick-replay').parent().css('display', 'none');
            let heightAfterCleanButtons = $('#divChatHistory').scrollTop()
            scrollTopUserLastMessage = scrollTopUserLastMessage - (heightBeforeCleanButtons - heightAfterCleanButtons)

        }
    }

    return LiveChat;
})(Zepto);
